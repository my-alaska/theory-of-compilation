Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> { instructions }
Rule 7     instruction -> if
Rule 8     instruction -> loop
Rule 9     instruction -> return ;
Rule 10    instruction -> assignment ;
Rule 11    instruction -> print ;
Rule 12    instruction -> breakContinue
Rule 13    breakContinue -> BREAK ;
Rule 14    breakContinue -> CONTINUE ;
Rule 15    if -> IF ( expression ) instruction
Rule 16    if -> IF ( expression ) instruction ELSE instruction
Rule 17    loop -> for
Rule 18    loop -> while
Rule 19    for -> FOR ID = expression : expression instruction
Rule 20    while -> WHILE ( expression ) instruction
Rule 21    return -> RETURN
Rule 22    return -> RETURN expression
Rule 23    assignment -> assignable assign_operator expression
Rule 24    assign_operator -> =
Rule 25    assign_operator -> ADDASSIGN
Rule 26    assign_operator -> SUBASSIGN
Rule 27    assign_operator -> MULASSIGN
Rule 28    assign_operator -> DIVASSIGN
Rule 29    assignable -> id
Rule 30    assignable -> id [ function_args ]
Rule 31    id -> ID
Rule 32    print -> PRINT printable_list
Rule 33    printable_list -> printable_list , printable
Rule 34    printable_list -> printable
Rule 35    printable -> string
Rule 36    printable -> expression
Rule 37    string -> STRING
Rule 38    expression -> int
Rule 39    expression -> float
Rule 40    expression -> assignable
Rule 41    expression -> bracketed
Rule 42    expression -> matrix
Rule 43    expression -> matrix_function
Rule 44    expression -> binary_expr
Rule 45    expression -> uminus
Rule 46    expression -> transposition
Rule 47    bracketed -> ( expression )
Rule 48    int -> INTNUM
Rule 49    float -> FLOATNUM
Rule 50    binary_expr -> expression + expression
Rule 51    binary_expr -> expression - expression
Rule 52    binary_expr -> expression * expression
Rule 53    binary_expr -> expression / expression
Rule 54    binary_expr -> expression DOTADD expression
Rule 55    binary_expr -> expression DOTSUB expression
Rule 56    binary_expr -> expression DOTMUL expression
Rule 57    binary_expr -> expression DOTDIV expression
Rule 58    binary_expr -> expression < expression
Rule 59    binary_expr -> expression > expression
Rule 60    binary_expr -> expression ELESS expression
Rule 61    binary_expr -> expression EGREATER expression
Rule 62    binary_expr -> expression EQUALS expression
Rule 63    binary_expr -> expression NEQUALS expression
Rule 64    uminus -> - expression
Rule 65    transposition -> expression '
Rule 66    matrix -> [ vector_1 ]
Rule 67    vector_1 -> vector_1 , [ vector_2 ]
Rule 68    vector_1 -> [ vector_2 ]
Rule 69    vector_2 -> vector_2 , expression
Rule 70    vector_2 -> expression
Rule 71    matrix_function -> function_name ( function_args )
Rule 72    function_name -> EYE
Rule 73    function_name -> ZEROS
Rule 74    function_name -> ONES
Rule 75    function_args -> function_args , expression
Rule 76    function_args -> expression

Terminals, with rules where they appear

'                    : 65
(                    : 15 16 20 47 71
)                    : 15 16 20 47 71
*                    : 52
+                    : 50
,                    : 33 67 69 75
-                    : 51 64
/                    : 53
:                    : 19
;                    : 9 10 11 13 14
<                    : 58
=                    : 19 24
>                    : 59
ADDASSIGN            : 25
BREAK                : 13
CONTINUE             : 14
DIVASSIGN            : 28
DOTADD               : 54
DOTDIV               : 57
DOTMUL               : 56
DOTSUB               : 55
EGREATER             : 61
ELESS                : 60
ELSE                 : 16
EQUALS               : 62
EYE                  : 72
FLOATNUM             : 49
FOR                  : 19
ID                   : 19 31
IF                   : 15 16
INTNUM               : 48
MULASSIGN            : 27
NEQUALS              : 63
ONES                 : 74
PRINT                : 32
RETURN               : 21 22
STRING               : 37
SUBASSIGN            : 26
WHILE                : 20
ZEROS                : 73
[                    : 30 66 67 68
]                    : 30 66 67 68
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

assign_operator      : 23
assignable           : 23 40
assignment           : 10
binary_expr          : 44
bracketed            : 41
breakContinue        : 12
expression           : 15 16 19 19 20 22 23 36 47 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 65 69 70 75 76
float                : 39
for                  : 17
function_args        : 30 71 75
function_name        : 71
id                   : 29 30
if                   : 7
instruction          : 4 5 15 16 16 19 20
instructions         : 2 4 6
instructions_opt     : 1
int                  : 38
loop                 : 8
matrix               : 42
matrix_function      : 43
print                : 11
printable            : 33 34
printable_list       : 32 33
program              : 0
return               : 9
string               : 35
transposition        : 46
uminus               : 45
vector_1             : 66 67
vector_2             : 67 68 69
while                : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    $end            reduce using rule 3 (instructions_opt -> .)
    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    instruction                    shift and go to state 24
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 4

    (5) instructions -> instruction .

    {               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    instructions                   shift and go to state 25
    instruction                    shift and go to state 4
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 6

    (7) instruction -> if .

    {               reduce using rule 7 (instruction -> if .)
    IF              reduce using rule 7 (instruction -> if .)
    RETURN          reduce using rule 7 (instruction -> if .)
    PRINT           reduce using rule 7 (instruction -> if .)
    BREAK           reduce using rule 7 (instruction -> if .)
    CONTINUE        reduce using rule 7 (instruction -> if .)
    FOR             reduce using rule 7 (instruction -> if .)
    WHILE           reduce using rule 7 (instruction -> if .)
    ID              reduce using rule 7 (instruction -> if .)
    $end            reduce using rule 7 (instruction -> if .)
    }               reduce using rule 7 (instruction -> if .)
    ELSE            reduce using rule 7 (instruction -> if .)


state 7

    (8) instruction -> loop .

    {               reduce using rule 8 (instruction -> loop .)
    IF              reduce using rule 8 (instruction -> loop .)
    RETURN          reduce using rule 8 (instruction -> loop .)
    PRINT           reduce using rule 8 (instruction -> loop .)
    BREAK           reduce using rule 8 (instruction -> loop .)
    CONTINUE        reduce using rule 8 (instruction -> loop .)
    FOR             reduce using rule 8 (instruction -> loop .)
    WHILE           reduce using rule 8 (instruction -> loop .)
    ID              reduce using rule 8 (instruction -> loop .)
    $end            reduce using rule 8 (instruction -> loop .)
    }               reduce using rule 8 (instruction -> loop .)
    ELSE            reduce using rule 8 (instruction -> loop .)


state 8

    (9) instruction -> return . ;

    ;               shift and go to state 26


state 9

    (10) instruction -> assignment . ;

    ;               shift and go to state 27


state 10

    (11) instruction -> print . ;

    ;               shift and go to state 28


state 11

    (12) instruction -> breakContinue .

    {               reduce using rule 12 (instruction -> breakContinue .)
    IF              reduce using rule 12 (instruction -> breakContinue .)
    RETURN          reduce using rule 12 (instruction -> breakContinue .)
    PRINT           reduce using rule 12 (instruction -> breakContinue .)
    BREAK           reduce using rule 12 (instruction -> breakContinue .)
    CONTINUE        reduce using rule 12 (instruction -> breakContinue .)
    FOR             reduce using rule 12 (instruction -> breakContinue .)
    WHILE           reduce using rule 12 (instruction -> breakContinue .)
    ID              reduce using rule 12 (instruction -> breakContinue .)
    $end            reduce using rule 12 (instruction -> breakContinue .)
    }               reduce using rule 12 (instruction -> breakContinue .)
    ELSE            reduce using rule 12 (instruction -> breakContinue .)


state 12

    (15) if -> IF . ( expression ) instruction
    (16) if -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 29


state 13

    (17) loop -> for .

    {               reduce using rule 17 (loop -> for .)
    IF              reduce using rule 17 (loop -> for .)
    RETURN          reduce using rule 17 (loop -> for .)
    PRINT           reduce using rule 17 (loop -> for .)
    BREAK           reduce using rule 17 (loop -> for .)
    CONTINUE        reduce using rule 17 (loop -> for .)
    FOR             reduce using rule 17 (loop -> for .)
    WHILE           reduce using rule 17 (loop -> for .)
    ID              reduce using rule 17 (loop -> for .)
    $end            reduce using rule 17 (loop -> for .)
    }               reduce using rule 17 (loop -> for .)
    ELSE            reduce using rule 17 (loop -> for .)


state 14

    (18) loop -> while .

    {               reduce using rule 18 (loop -> while .)
    IF              reduce using rule 18 (loop -> while .)
    RETURN          reduce using rule 18 (loop -> while .)
    PRINT           reduce using rule 18 (loop -> while .)
    BREAK           reduce using rule 18 (loop -> while .)
    CONTINUE        reduce using rule 18 (loop -> while .)
    FOR             reduce using rule 18 (loop -> while .)
    WHILE           reduce using rule 18 (loop -> while .)
    ID              reduce using rule 18 (loop -> while .)
    $end            reduce using rule 18 (loop -> while .)
    }               reduce using rule 18 (loop -> while .)
    ELSE            reduce using rule 18 (loop -> while .)


state 15

    (21) return -> RETURN .
    (22) return -> RETURN . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    ;               reduce using rule 21 (return -> RETURN .)
    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 30
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 16

    (23) assignment -> assignable . assign_operator expression
    (24) assign_operator -> . =
    (25) assign_operator -> . ADDASSIGN
    (26) assign_operator -> . SUBASSIGN
    (27) assign_operator -> . MULASSIGN
    (28) assign_operator -> . DIVASSIGN

    =               shift and go to state 50
    ADDASSIGN       shift and go to state 51
    SUBASSIGN       shift and go to state 52
    MULASSIGN       shift and go to state 53
    DIVASSIGN       shift and go to state 54

    assign_operator                shift and go to state 49

state 17

    (32) print -> PRINT . printable_list
    (33) printable_list -> . printable_list , printable
    (34) printable_list -> . printable
    (35) printable -> . string
    (36) printable -> . expression
    (37) string -> . STRING
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    STRING          shift and go to state 59
    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    printable_list                 shift and go to state 55
    printable                      shift and go to state 56
    string                         shift and go to state 57
    expression                     shift and go to state 58
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 18

    (13) breakContinue -> BREAK . ;

    ;               shift and go to state 60


state 19

    (14) breakContinue -> CONTINUE . ;

    ;               shift and go to state 61


state 20

    (19) for -> FOR . ID = expression : expression instruction

    ID              shift and go to state 62


state 21

    (31) id -> ID .

    [               reduce using rule 31 (id -> ID .)
    =               reduce using rule 31 (id -> ID .)
    ADDASSIGN       reduce using rule 31 (id -> ID .)
    SUBASSIGN       reduce using rule 31 (id -> ID .)
    MULASSIGN       reduce using rule 31 (id -> ID .)
    DIVASSIGN       reduce using rule 31 (id -> ID .)
    +               reduce using rule 31 (id -> ID .)
    -               reduce using rule 31 (id -> ID .)
    *               reduce using rule 31 (id -> ID .)
    /               reduce using rule 31 (id -> ID .)
    DOTADD          reduce using rule 31 (id -> ID .)
    DOTSUB          reduce using rule 31 (id -> ID .)
    DOTMUL          reduce using rule 31 (id -> ID .)
    DOTDIV          reduce using rule 31 (id -> ID .)
    <               reduce using rule 31 (id -> ID .)
    >               reduce using rule 31 (id -> ID .)
    ELESS           reduce using rule 31 (id -> ID .)
    EGREATER        reduce using rule 31 (id -> ID .)
    EQUALS          reduce using rule 31 (id -> ID .)
    NEQUALS         reduce using rule 31 (id -> ID .)
    '               reduce using rule 31 (id -> ID .)
    ;               reduce using rule 31 (id -> ID .)
    ,               reduce using rule 31 (id -> ID .)
    )               reduce using rule 31 (id -> ID .)
    ]               reduce using rule 31 (id -> ID .)
    :               reduce using rule 31 (id -> ID .)
    {               reduce using rule 31 (id -> ID .)
    IF              reduce using rule 31 (id -> ID .)
    RETURN          reduce using rule 31 (id -> ID .)
    PRINT           reduce using rule 31 (id -> ID .)
    BREAK           reduce using rule 31 (id -> ID .)
    CONTINUE        reduce using rule 31 (id -> ID .)
    FOR             reduce using rule 31 (id -> ID .)
    WHILE           reduce using rule 31 (id -> ID .)
    ID              reduce using rule 31 (id -> ID .)


state 22

    (20) while -> WHILE . ( expression ) instruction

    (               shift and go to state 63


state 23

    (29) assignable -> id .
    (30) assignable -> id . [ function_args ]

    =               reduce using rule 29 (assignable -> id .)
    ADDASSIGN       reduce using rule 29 (assignable -> id .)
    SUBASSIGN       reduce using rule 29 (assignable -> id .)
    MULASSIGN       reduce using rule 29 (assignable -> id .)
    DIVASSIGN       reduce using rule 29 (assignable -> id .)
    +               reduce using rule 29 (assignable -> id .)
    -               reduce using rule 29 (assignable -> id .)
    *               reduce using rule 29 (assignable -> id .)
    /               reduce using rule 29 (assignable -> id .)
    DOTADD          reduce using rule 29 (assignable -> id .)
    DOTSUB          reduce using rule 29 (assignable -> id .)
    DOTMUL          reduce using rule 29 (assignable -> id .)
    DOTDIV          reduce using rule 29 (assignable -> id .)
    <               reduce using rule 29 (assignable -> id .)
    >               reduce using rule 29 (assignable -> id .)
    ELESS           reduce using rule 29 (assignable -> id .)
    EGREATER        reduce using rule 29 (assignable -> id .)
    EQUALS          reduce using rule 29 (assignable -> id .)
    NEQUALS         reduce using rule 29 (assignable -> id .)
    '               reduce using rule 29 (assignable -> id .)
    ;               reduce using rule 29 (assignable -> id .)
    ,               reduce using rule 29 (assignable -> id .)
    )               reduce using rule 29 (assignable -> id .)
    ]               reduce using rule 29 (assignable -> id .)
    :               reduce using rule 29 (assignable -> id .)
    {               reduce using rule 29 (assignable -> id .)
    IF              reduce using rule 29 (assignable -> id .)
    RETURN          reduce using rule 29 (assignable -> id .)
    PRINT           reduce using rule 29 (assignable -> id .)
    BREAK           reduce using rule 29 (assignable -> id .)
    CONTINUE        reduce using rule 29 (assignable -> id .)
    FOR             reduce using rule 29 (assignable -> id .)
    WHILE           reduce using rule 29 (assignable -> id .)
    ID              reduce using rule 29 (assignable -> id .)
    [               shift and go to state 64


state 24

    (4) instructions -> instructions instruction .

    {               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 25

    (6) instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    }               shift and go to state 65
    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    instruction                    shift and go to state 24
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 26

    (9) instruction -> return ; .

    {               reduce using rule 9 (instruction -> return ; .)
    IF              reduce using rule 9 (instruction -> return ; .)
    RETURN          reduce using rule 9 (instruction -> return ; .)
    PRINT           reduce using rule 9 (instruction -> return ; .)
    BREAK           reduce using rule 9 (instruction -> return ; .)
    CONTINUE        reduce using rule 9 (instruction -> return ; .)
    FOR             reduce using rule 9 (instruction -> return ; .)
    WHILE           reduce using rule 9 (instruction -> return ; .)
    ID              reduce using rule 9 (instruction -> return ; .)
    $end            reduce using rule 9 (instruction -> return ; .)
    }               reduce using rule 9 (instruction -> return ; .)
    ELSE            reduce using rule 9 (instruction -> return ; .)


state 27

    (10) instruction -> assignment ; .

    {               reduce using rule 10 (instruction -> assignment ; .)
    IF              reduce using rule 10 (instruction -> assignment ; .)
    RETURN          reduce using rule 10 (instruction -> assignment ; .)
    PRINT           reduce using rule 10 (instruction -> assignment ; .)
    BREAK           reduce using rule 10 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 10 (instruction -> assignment ; .)
    FOR             reduce using rule 10 (instruction -> assignment ; .)
    WHILE           reduce using rule 10 (instruction -> assignment ; .)
    ID              reduce using rule 10 (instruction -> assignment ; .)
    $end            reduce using rule 10 (instruction -> assignment ; .)
    }               reduce using rule 10 (instruction -> assignment ; .)
    ELSE            reduce using rule 10 (instruction -> assignment ; .)


state 28

    (11) instruction -> print ; .

    {               reduce using rule 11 (instruction -> print ; .)
    IF              reduce using rule 11 (instruction -> print ; .)
    RETURN          reduce using rule 11 (instruction -> print ; .)
    PRINT           reduce using rule 11 (instruction -> print ; .)
    BREAK           reduce using rule 11 (instruction -> print ; .)
    CONTINUE        reduce using rule 11 (instruction -> print ; .)
    FOR             reduce using rule 11 (instruction -> print ; .)
    WHILE           reduce using rule 11 (instruction -> print ; .)
    ID              reduce using rule 11 (instruction -> print ; .)
    $end            reduce using rule 11 (instruction -> print ; .)
    }               reduce using rule 11 (instruction -> print ; .)
    ELSE            reduce using rule 11 (instruction -> print ; .)


state 29

    (15) if -> IF ( . expression ) instruction
    (16) if -> IF ( . expression ) instruction ELSE instruction
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 66
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 30

    (22) return -> RETURN expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    ;               reduce using rule 22 (return -> RETURN expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 31

    (38) expression -> int .

    +               reduce using rule 38 (expression -> int .)
    -               reduce using rule 38 (expression -> int .)
    *               reduce using rule 38 (expression -> int .)
    /               reduce using rule 38 (expression -> int .)
    DOTADD          reduce using rule 38 (expression -> int .)
    DOTSUB          reduce using rule 38 (expression -> int .)
    DOTMUL          reduce using rule 38 (expression -> int .)
    DOTDIV          reduce using rule 38 (expression -> int .)
    <               reduce using rule 38 (expression -> int .)
    >               reduce using rule 38 (expression -> int .)
    ELESS           reduce using rule 38 (expression -> int .)
    EGREATER        reduce using rule 38 (expression -> int .)
    EQUALS          reduce using rule 38 (expression -> int .)
    NEQUALS         reduce using rule 38 (expression -> int .)
    '               reduce using rule 38 (expression -> int .)
    ;               reduce using rule 38 (expression -> int .)
    ,               reduce using rule 38 (expression -> int .)
    )               reduce using rule 38 (expression -> int .)
    ]               reduce using rule 38 (expression -> int .)
    :               reduce using rule 38 (expression -> int .)
    {               reduce using rule 38 (expression -> int .)
    IF              reduce using rule 38 (expression -> int .)
    RETURN          reduce using rule 38 (expression -> int .)
    PRINT           reduce using rule 38 (expression -> int .)
    BREAK           reduce using rule 38 (expression -> int .)
    CONTINUE        reduce using rule 38 (expression -> int .)
    FOR             reduce using rule 38 (expression -> int .)
    WHILE           reduce using rule 38 (expression -> int .)
    ID              reduce using rule 38 (expression -> int .)


state 32

    (39) expression -> float .

    +               reduce using rule 39 (expression -> float .)
    -               reduce using rule 39 (expression -> float .)
    *               reduce using rule 39 (expression -> float .)
    /               reduce using rule 39 (expression -> float .)
    DOTADD          reduce using rule 39 (expression -> float .)
    DOTSUB          reduce using rule 39 (expression -> float .)
    DOTMUL          reduce using rule 39 (expression -> float .)
    DOTDIV          reduce using rule 39 (expression -> float .)
    <               reduce using rule 39 (expression -> float .)
    >               reduce using rule 39 (expression -> float .)
    ELESS           reduce using rule 39 (expression -> float .)
    EGREATER        reduce using rule 39 (expression -> float .)
    EQUALS          reduce using rule 39 (expression -> float .)
    NEQUALS         reduce using rule 39 (expression -> float .)
    '               reduce using rule 39 (expression -> float .)
    ;               reduce using rule 39 (expression -> float .)
    ,               reduce using rule 39 (expression -> float .)
    )               reduce using rule 39 (expression -> float .)
    ]               reduce using rule 39 (expression -> float .)
    :               reduce using rule 39 (expression -> float .)
    {               reduce using rule 39 (expression -> float .)
    IF              reduce using rule 39 (expression -> float .)
    RETURN          reduce using rule 39 (expression -> float .)
    PRINT           reduce using rule 39 (expression -> float .)
    BREAK           reduce using rule 39 (expression -> float .)
    CONTINUE        reduce using rule 39 (expression -> float .)
    FOR             reduce using rule 39 (expression -> float .)
    WHILE           reduce using rule 39 (expression -> float .)
    ID              reduce using rule 39 (expression -> float .)


state 33

    (40) expression -> assignable .

    +               reduce using rule 40 (expression -> assignable .)
    -               reduce using rule 40 (expression -> assignable .)
    *               reduce using rule 40 (expression -> assignable .)
    /               reduce using rule 40 (expression -> assignable .)
    DOTADD          reduce using rule 40 (expression -> assignable .)
    DOTSUB          reduce using rule 40 (expression -> assignable .)
    DOTMUL          reduce using rule 40 (expression -> assignable .)
    DOTDIV          reduce using rule 40 (expression -> assignable .)
    <               reduce using rule 40 (expression -> assignable .)
    >               reduce using rule 40 (expression -> assignable .)
    ELESS           reduce using rule 40 (expression -> assignable .)
    EGREATER        reduce using rule 40 (expression -> assignable .)
    EQUALS          reduce using rule 40 (expression -> assignable .)
    NEQUALS         reduce using rule 40 (expression -> assignable .)
    '               reduce using rule 40 (expression -> assignable .)
    ;               reduce using rule 40 (expression -> assignable .)
    ,               reduce using rule 40 (expression -> assignable .)
    )               reduce using rule 40 (expression -> assignable .)
    ]               reduce using rule 40 (expression -> assignable .)
    :               reduce using rule 40 (expression -> assignable .)
    {               reduce using rule 40 (expression -> assignable .)
    IF              reduce using rule 40 (expression -> assignable .)
    RETURN          reduce using rule 40 (expression -> assignable .)
    PRINT           reduce using rule 40 (expression -> assignable .)
    BREAK           reduce using rule 40 (expression -> assignable .)
    CONTINUE        reduce using rule 40 (expression -> assignable .)
    FOR             reduce using rule 40 (expression -> assignable .)
    WHILE           reduce using rule 40 (expression -> assignable .)
    ID              reduce using rule 40 (expression -> assignable .)


state 34

    (41) expression -> bracketed .

    +               reduce using rule 41 (expression -> bracketed .)
    -               reduce using rule 41 (expression -> bracketed .)
    *               reduce using rule 41 (expression -> bracketed .)
    /               reduce using rule 41 (expression -> bracketed .)
    DOTADD          reduce using rule 41 (expression -> bracketed .)
    DOTSUB          reduce using rule 41 (expression -> bracketed .)
    DOTMUL          reduce using rule 41 (expression -> bracketed .)
    DOTDIV          reduce using rule 41 (expression -> bracketed .)
    <               reduce using rule 41 (expression -> bracketed .)
    >               reduce using rule 41 (expression -> bracketed .)
    ELESS           reduce using rule 41 (expression -> bracketed .)
    EGREATER        reduce using rule 41 (expression -> bracketed .)
    EQUALS          reduce using rule 41 (expression -> bracketed .)
    NEQUALS         reduce using rule 41 (expression -> bracketed .)
    '               reduce using rule 41 (expression -> bracketed .)
    ;               reduce using rule 41 (expression -> bracketed .)
    ,               reduce using rule 41 (expression -> bracketed .)
    )               reduce using rule 41 (expression -> bracketed .)
    ]               reduce using rule 41 (expression -> bracketed .)
    :               reduce using rule 41 (expression -> bracketed .)
    {               reduce using rule 41 (expression -> bracketed .)
    IF              reduce using rule 41 (expression -> bracketed .)
    RETURN          reduce using rule 41 (expression -> bracketed .)
    PRINT           reduce using rule 41 (expression -> bracketed .)
    BREAK           reduce using rule 41 (expression -> bracketed .)
    CONTINUE        reduce using rule 41 (expression -> bracketed .)
    FOR             reduce using rule 41 (expression -> bracketed .)
    WHILE           reduce using rule 41 (expression -> bracketed .)
    ID              reduce using rule 41 (expression -> bracketed .)


state 35

    (42) expression -> matrix .

    +               reduce using rule 42 (expression -> matrix .)
    -               reduce using rule 42 (expression -> matrix .)
    *               reduce using rule 42 (expression -> matrix .)
    /               reduce using rule 42 (expression -> matrix .)
    DOTADD          reduce using rule 42 (expression -> matrix .)
    DOTSUB          reduce using rule 42 (expression -> matrix .)
    DOTMUL          reduce using rule 42 (expression -> matrix .)
    DOTDIV          reduce using rule 42 (expression -> matrix .)
    <               reduce using rule 42 (expression -> matrix .)
    >               reduce using rule 42 (expression -> matrix .)
    ELESS           reduce using rule 42 (expression -> matrix .)
    EGREATER        reduce using rule 42 (expression -> matrix .)
    EQUALS          reduce using rule 42 (expression -> matrix .)
    NEQUALS         reduce using rule 42 (expression -> matrix .)
    '               reduce using rule 42 (expression -> matrix .)
    ;               reduce using rule 42 (expression -> matrix .)
    ,               reduce using rule 42 (expression -> matrix .)
    )               reduce using rule 42 (expression -> matrix .)
    ]               reduce using rule 42 (expression -> matrix .)
    :               reduce using rule 42 (expression -> matrix .)
    {               reduce using rule 42 (expression -> matrix .)
    IF              reduce using rule 42 (expression -> matrix .)
    RETURN          reduce using rule 42 (expression -> matrix .)
    PRINT           reduce using rule 42 (expression -> matrix .)
    BREAK           reduce using rule 42 (expression -> matrix .)
    CONTINUE        reduce using rule 42 (expression -> matrix .)
    FOR             reduce using rule 42 (expression -> matrix .)
    WHILE           reduce using rule 42 (expression -> matrix .)
    ID              reduce using rule 42 (expression -> matrix .)


state 36

    (43) expression -> matrix_function .

    +               reduce using rule 43 (expression -> matrix_function .)
    -               reduce using rule 43 (expression -> matrix_function .)
    *               reduce using rule 43 (expression -> matrix_function .)
    /               reduce using rule 43 (expression -> matrix_function .)
    DOTADD          reduce using rule 43 (expression -> matrix_function .)
    DOTSUB          reduce using rule 43 (expression -> matrix_function .)
    DOTMUL          reduce using rule 43 (expression -> matrix_function .)
    DOTDIV          reduce using rule 43 (expression -> matrix_function .)
    <               reduce using rule 43 (expression -> matrix_function .)
    >               reduce using rule 43 (expression -> matrix_function .)
    ELESS           reduce using rule 43 (expression -> matrix_function .)
    EGREATER        reduce using rule 43 (expression -> matrix_function .)
    EQUALS          reduce using rule 43 (expression -> matrix_function .)
    NEQUALS         reduce using rule 43 (expression -> matrix_function .)
    '               reduce using rule 43 (expression -> matrix_function .)
    ;               reduce using rule 43 (expression -> matrix_function .)
    ,               reduce using rule 43 (expression -> matrix_function .)
    )               reduce using rule 43 (expression -> matrix_function .)
    ]               reduce using rule 43 (expression -> matrix_function .)
    :               reduce using rule 43 (expression -> matrix_function .)
    {               reduce using rule 43 (expression -> matrix_function .)
    IF              reduce using rule 43 (expression -> matrix_function .)
    RETURN          reduce using rule 43 (expression -> matrix_function .)
    PRINT           reduce using rule 43 (expression -> matrix_function .)
    BREAK           reduce using rule 43 (expression -> matrix_function .)
    CONTINUE        reduce using rule 43 (expression -> matrix_function .)
    FOR             reduce using rule 43 (expression -> matrix_function .)
    WHILE           reduce using rule 43 (expression -> matrix_function .)
    ID              reduce using rule 43 (expression -> matrix_function .)


state 37

    (44) expression -> binary_expr .

    +               reduce using rule 44 (expression -> binary_expr .)
    -               reduce using rule 44 (expression -> binary_expr .)
    *               reduce using rule 44 (expression -> binary_expr .)
    /               reduce using rule 44 (expression -> binary_expr .)
    DOTADD          reduce using rule 44 (expression -> binary_expr .)
    DOTSUB          reduce using rule 44 (expression -> binary_expr .)
    DOTMUL          reduce using rule 44 (expression -> binary_expr .)
    DOTDIV          reduce using rule 44 (expression -> binary_expr .)
    <               reduce using rule 44 (expression -> binary_expr .)
    >               reduce using rule 44 (expression -> binary_expr .)
    ELESS           reduce using rule 44 (expression -> binary_expr .)
    EGREATER        reduce using rule 44 (expression -> binary_expr .)
    EQUALS          reduce using rule 44 (expression -> binary_expr .)
    NEQUALS         reduce using rule 44 (expression -> binary_expr .)
    '               reduce using rule 44 (expression -> binary_expr .)
    ;               reduce using rule 44 (expression -> binary_expr .)
    ,               reduce using rule 44 (expression -> binary_expr .)
    )               reduce using rule 44 (expression -> binary_expr .)
    ]               reduce using rule 44 (expression -> binary_expr .)
    :               reduce using rule 44 (expression -> binary_expr .)
    {               reduce using rule 44 (expression -> binary_expr .)
    IF              reduce using rule 44 (expression -> binary_expr .)
    RETURN          reduce using rule 44 (expression -> binary_expr .)
    PRINT           reduce using rule 44 (expression -> binary_expr .)
    BREAK           reduce using rule 44 (expression -> binary_expr .)
    CONTINUE        reduce using rule 44 (expression -> binary_expr .)
    FOR             reduce using rule 44 (expression -> binary_expr .)
    WHILE           reduce using rule 44 (expression -> binary_expr .)
    ID              reduce using rule 44 (expression -> binary_expr .)


state 38

    (45) expression -> uminus .

    +               reduce using rule 45 (expression -> uminus .)
    -               reduce using rule 45 (expression -> uminus .)
    *               reduce using rule 45 (expression -> uminus .)
    /               reduce using rule 45 (expression -> uminus .)
    DOTADD          reduce using rule 45 (expression -> uminus .)
    DOTSUB          reduce using rule 45 (expression -> uminus .)
    DOTMUL          reduce using rule 45 (expression -> uminus .)
    DOTDIV          reduce using rule 45 (expression -> uminus .)
    <               reduce using rule 45 (expression -> uminus .)
    >               reduce using rule 45 (expression -> uminus .)
    ELESS           reduce using rule 45 (expression -> uminus .)
    EGREATER        reduce using rule 45 (expression -> uminus .)
    EQUALS          reduce using rule 45 (expression -> uminus .)
    NEQUALS         reduce using rule 45 (expression -> uminus .)
    '               reduce using rule 45 (expression -> uminus .)
    ;               reduce using rule 45 (expression -> uminus .)
    ,               reduce using rule 45 (expression -> uminus .)
    )               reduce using rule 45 (expression -> uminus .)
    ]               reduce using rule 45 (expression -> uminus .)
    :               reduce using rule 45 (expression -> uminus .)
    {               reduce using rule 45 (expression -> uminus .)
    IF              reduce using rule 45 (expression -> uminus .)
    RETURN          reduce using rule 45 (expression -> uminus .)
    PRINT           reduce using rule 45 (expression -> uminus .)
    BREAK           reduce using rule 45 (expression -> uminus .)
    CONTINUE        reduce using rule 45 (expression -> uminus .)
    FOR             reduce using rule 45 (expression -> uminus .)
    WHILE           reduce using rule 45 (expression -> uminus .)
    ID              reduce using rule 45 (expression -> uminus .)


state 39

    (46) expression -> transposition .

    +               reduce using rule 46 (expression -> transposition .)
    -               reduce using rule 46 (expression -> transposition .)
    *               reduce using rule 46 (expression -> transposition .)
    /               reduce using rule 46 (expression -> transposition .)
    DOTADD          reduce using rule 46 (expression -> transposition .)
    DOTSUB          reduce using rule 46 (expression -> transposition .)
    DOTMUL          reduce using rule 46 (expression -> transposition .)
    DOTDIV          reduce using rule 46 (expression -> transposition .)
    <               reduce using rule 46 (expression -> transposition .)
    >               reduce using rule 46 (expression -> transposition .)
    ELESS           reduce using rule 46 (expression -> transposition .)
    EGREATER        reduce using rule 46 (expression -> transposition .)
    EQUALS          reduce using rule 46 (expression -> transposition .)
    NEQUALS         reduce using rule 46 (expression -> transposition .)
    '               reduce using rule 46 (expression -> transposition .)
    ;               reduce using rule 46 (expression -> transposition .)
    ,               reduce using rule 46 (expression -> transposition .)
    )               reduce using rule 46 (expression -> transposition .)
    ]               reduce using rule 46 (expression -> transposition .)
    :               reduce using rule 46 (expression -> transposition .)
    {               reduce using rule 46 (expression -> transposition .)
    IF              reduce using rule 46 (expression -> transposition .)
    RETURN          reduce using rule 46 (expression -> transposition .)
    PRINT           reduce using rule 46 (expression -> transposition .)
    BREAK           reduce using rule 46 (expression -> transposition .)
    CONTINUE        reduce using rule 46 (expression -> transposition .)
    FOR             reduce using rule 46 (expression -> transposition .)
    WHILE           reduce using rule 46 (expression -> transposition .)
    ID              reduce using rule 46 (expression -> transposition .)


state 40

    (48) int -> INTNUM .

    +               reduce using rule 48 (int -> INTNUM .)
    -               reduce using rule 48 (int -> INTNUM .)
    *               reduce using rule 48 (int -> INTNUM .)
    /               reduce using rule 48 (int -> INTNUM .)
    DOTADD          reduce using rule 48 (int -> INTNUM .)
    DOTSUB          reduce using rule 48 (int -> INTNUM .)
    DOTMUL          reduce using rule 48 (int -> INTNUM .)
    DOTDIV          reduce using rule 48 (int -> INTNUM .)
    <               reduce using rule 48 (int -> INTNUM .)
    >               reduce using rule 48 (int -> INTNUM .)
    ELESS           reduce using rule 48 (int -> INTNUM .)
    EGREATER        reduce using rule 48 (int -> INTNUM .)
    EQUALS          reduce using rule 48 (int -> INTNUM .)
    NEQUALS         reduce using rule 48 (int -> INTNUM .)
    '               reduce using rule 48 (int -> INTNUM .)
    ;               reduce using rule 48 (int -> INTNUM .)
    ,               reduce using rule 48 (int -> INTNUM .)
    )               reduce using rule 48 (int -> INTNUM .)
    ]               reduce using rule 48 (int -> INTNUM .)
    :               reduce using rule 48 (int -> INTNUM .)
    {               reduce using rule 48 (int -> INTNUM .)
    IF              reduce using rule 48 (int -> INTNUM .)
    RETURN          reduce using rule 48 (int -> INTNUM .)
    PRINT           reduce using rule 48 (int -> INTNUM .)
    BREAK           reduce using rule 48 (int -> INTNUM .)
    CONTINUE        reduce using rule 48 (int -> INTNUM .)
    FOR             reduce using rule 48 (int -> INTNUM .)
    WHILE           reduce using rule 48 (int -> INTNUM .)
    ID              reduce using rule 48 (int -> INTNUM .)


state 41

    (49) float -> FLOATNUM .

    +               reduce using rule 49 (float -> FLOATNUM .)
    -               reduce using rule 49 (float -> FLOATNUM .)
    *               reduce using rule 49 (float -> FLOATNUM .)
    /               reduce using rule 49 (float -> FLOATNUM .)
    DOTADD          reduce using rule 49 (float -> FLOATNUM .)
    DOTSUB          reduce using rule 49 (float -> FLOATNUM .)
    DOTMUL          reduce using rule 49 (float -> FLOATNUM .)
    DOTDIV          reduce using rule 49 (float -> FLOATNUM .)
    <               reduce using rule 49 (float -> FLOATNUM .)
    >               reduce using rule 49 (float -> FLOATNUM .)
    ELESS           reduce using rule 49 (float -> FLOATNUM .)
    EGREATER        reduce using rule 49 (float -> FLOATNUM .)
    EQUALS          reduce using rule 49 (float -> FLOATNUM .)
    NEQUALS         reduce using rule 49 (float -> FLOATNUM .)
    '               reduce using rule 49 (float -> FLOATNUM .)
    ;               reduce using rule 49 (float -> FLOATNUM .)
    ,               reduce using rule 49 (float -> FLOATNUM .)
    )               reduce using rule 49 (float -> FLOATNUM .)
    ]               reduce using rule 49 (float -> FLOATNUM .)
    :               reduce using rule 49 (float -> FLOATNUM .)
    {               reduce using rule 49 (float -> FLOATNUM .)
    IF              reduce using rule 49 (float -> FLOATNUM .)
    RETURN          reduce using rule 49 (float -> FLOATNUM .)
    PRINT           reduce using rule 49 (float -> FLOATNUM .)
    BREAK           reduce using rule 49 (float -> FLOATNUM .)
    CONTINUE        reduce using rule 49 (float -> FLOATNUM .)
    FOR             reduce using rule 49 (float -> FLOATNUM .)
    WHILE           reduce using rule 49 (float -> FLOATNUM .)
    ID              reduce using rule 49 (float -> FLOATNUM .)


state 42

    (66) matrix -> [ . vector_1 ]
    (67) vector_1 -> . vector_1 , [ vector_2 ]
    (68) vector_1 -> . [ vector_2 ]

    [               shift and go to state 82

    vector_1                       shift and go to state 83

state 43

    (47) bracketed -> ( . expression )
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 84
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 44

    (71) matrix_function -> function_name . ( function_args )

    (               shift and go to state 85


state 45

    (64) uminus -> - . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 86
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 46

    (72) function_name -> EYE .

    (               reduce using rule 72 (function_name -> EYE .)


state 47

    (73) function_name -> ZEROS .

    (               reduce using rule 73 (function_name -> ZEROS .)


state 48

    (74) function_name -> ONES .

    (               reduce using rule 74 (function_name -> ONES .)


state 49

    (23) assignment -> assignable assign_operator . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    assignable                     shift and go to state 33
    expression                     shift and go to state 87
    int                            shift and go to state 31
    float                          shift and go to state 32
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 50

    (24) assign_operator -> = .

    INTNUM          reduce using rule 24 (assign_operator -> = .)
    FLOATNUM        reduce using rule 24 (assign_operator -> = .)
    (               reduce using rule 24 (assign_operator -> = .)
    [               reduce using rule 24 (assign_operator -> = .)
    -               reduce using rule 24 (assign_operator -> = .)
    ID              reduce using rule 24 (assign_operator -> = .)
    EYE             reduce using rule 24 (assign_operator -> = .)
    ZEROS           reduce using rule 24 (assign_operator -> = .)
    ONES            reduce using rule 24 (assign_operator -> = .)


state 51

    (25) assign_operator -> ADDASSIGN .

    INTNUM          reduce using rule 25 (assign_operator -> ADDASSIGN .)
    FLOATNUM        reduce using rule 25 (assign_operator -> ADDASSIGN .)
    (               reduce using rule 25 (assign_operator -> ADDASSIGN .)
    [               reduce using rule 25 (assign_operator -> ADDASSIGN .)
    -               reduce using rule 25 (assign_operator -> ADDASSIGN .)
    ID              reduce using rule 25 (assign_operator -> ADDASSIGN .)
    EYE             reduce using rule 25 (assign_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 25 (assign_operator -> ADDASSIGN .)
    ONES            reduce using rule 25 (assign_operator -> ADDASSIGN .)


state 52

    (26) assign_operator -> SUBASSIGN .

    INTNUM          reduce using rule 26 (assign_operator -> SUBASSIGN .)
    FLOATNUM        reduce using rule 26 (assign_operator -> SUBASSIGN .)
    (               reduce using rule 26 (assign_operator -> SUBASSIGN .)
    [               reduce using rule 26 (assign_operator -> SUBASSIGN .)
    -               reduce using rule 26 (assign_operator -> SUBASSIGN .)
    ID              reduce using rule 26 (assign_operator -> SUBASSIGN .)
    EYE             reduce using rule 26 (assign_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 26 (assign_operator -> SUBASSIGN .)
    ONES            reduce using rule 26 (assign_operator -> SUBASSIGN .)


state 53

    (27) assign_operator -> MULASSIGN .

    INTNUM          reduce using rule 27 (assign_operator -> MULASSIGN .)
    FLOATNUM        reduce using rule 27 (assign_operator -> MULASSIGN .)
    (               reduce using rule 27 (assign_operator -> MULASSIGN .)
    [               reduce using rule 27 (assign_operator -> MULASSIGN .)
    -               reduce using rule 27 (assign_operator -> MULASSIGN .)
    ID              reduce using rule 27 (assign_operator -> MULASSIGN .)
    EYE             reduce using rule 27 (assign_operator -> MULASSIGN .)
    ZEROS           reduce using rule 27 (assign_operator -> MULASSIGN .)
    ONES            reduce using rule 27 (assign_operator -> MULASSIGN .)


state 54

    (28) assign_operator -> DIVASSIGN .

    INTNUM          reduce using rule 28 (assign_operator -> DIVASSIGN .)
    FLOATNUM        reduce using rule 28 (assign_operator -> DIVASSIGN .)
    (               reduce using rule 28 (assign_operator -> DIVASSIGN .)
    [               reduce using rule 28 (assign_operator -> DIVASSIGN .)
    -               reduce using rule 28 (assign_operator -> DIVASSIGN .)
    ID              reduce using rule 28 (assign_operator -> DIVASSIGN .)
    EYE             reduce using rule 28 (assign_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 28 (assign_operator -> DIVASSIGN .)
    ONES            reduce using rule 28 (assign_operator -> DIVASSIGN .)


state 55

    (32) print -> PRINT printable_list .
    (33) printable_list -> printable_list . , printable

    ;               reduce using rule 32 (print -> PRINT printable_list .)
    ,               shift and go to state 88


state 56

    (34) printable_list -> printable .

    ,               reduce using rule 34 (printable_list -> printable .)
    ;               reduce using rule 34 (printable_list -> printable .)


state 57

    (35) printable -> string .

    ,               reduce using rule 35 (printable -> string .)
    ;               reduce using rule 35 (printable -> string .)


state 58

    (36) printable -> expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    ,               reduce using rule 36 (printable -> expression .)
    ;               reduce using rule 36 (printable -> expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 59

    (37) string -> STRING .

    ,               reduce using rule 37 (string -> STRING .)
    ;               reduce using rule 37 (string -> STRING .)


state 60

    (13) breakContinue -> BREAK ; .

    {               reduce using rule 13 (breakContinue -> BREAK ; .)
    IF              reduce using rule 13 (breakContinue -> BREAK ; .)
    RETURN          reduce using rule 13 (breakContinue -> BREAK ; .)
    PRINT           reduce using rule 13 (breakContinue -> BREAK ; .)
    BREAK           reduce using rule 13 (breakContinue -> BREAK ; .)
    CONTINUE        reduce using rule 13 (breakContinue -> BREAK ; .)
    FOR             reduce using rule 13 (breakContinue -> BREAK ; .)
    WHILE           reduce using rule 13 (breakContinue -> BREAK ; .)
    ID              reduce using rule 13 (breakContinue -> BREAK ; .)
    $end            reduce using rule 13 (breakContinue -> BREAK ; .)
    }               reduce using rule 13 (breakContinue -> BREAK ; .)
    ELSE            reduce using rule 13 (breakContinue -> BREAK ; .)


state 61

    (14) breakContinue -> CONTINUE ; .

    {               reduce using rule 14 (breakContinue -> CONTINUE ; .)
    IF              reduce using rule 14 (breakContinue -> CONTINUE ; .)
    RETURN          reduce using rule 14 (breakContinue -> CONTINUE ; .)
    PRINT           reduce using rule 14 (breakContinue -> CONTINUE ; .)
    BREAK           reduce using rule 14 (breakContinue -> CONTINUE ; .)
    CONTINUE        reduce using rule 14 (breakContinue -> CONTINUE ; .)
    FOR             reduce using rule 14 (breakContinue -> CONTINUE ; .)
    WHILE           reduce using rule 14 (breakContinue -> CONTINUE ; .)
    ID              reduce using rule 14 (breakContinue -> CONTINUE ; .)
    $end            reduce using rule 14 (breakContinue -> CONTINUE ; .)
    }               reduce using rule 14 (breakContinue -> CONTINUE ; .)
    ELSE            reduce using rule 14 (breakContinue -> CONTINUE ; .)


state 62

    (19) for -> FOR ID . = expression : expression instruction

    =               shift and go to state 89


state 63

    (20) while -> WHILE ( . expression ) instruction
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 90
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 64

    (30) assignable -> id [ . function_args ]
    (75) function_args -> . function_args , expression
    (76) function_args -> . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    id                             shift and go to state 23
    function_args                  shift and go to state 91
    expression                     shift and go to state 92
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    function_name                  shift and go to state 44

state 65

    (6) instruction -> { instructions } .

    {               reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)


state 66

    (15) if -> IF ( expression . ) instruction
    (16) if -> IF ( expression . ) instruction ELSE instruction
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    )               shift and go to state 93
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 67

    (50) binary_expr -> expression + . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 94
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 68

    (51) binary_expr -> expression - . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 95
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 69

    (52) binary_expr -> expression * . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 96
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 70

    (53) binary_expr -> expression / . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 97
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 71

    (54) binary_expr -> expression DOTADD . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 98
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 72

    (55) binary_expr -> expression DOTSUB . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 99
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 73

    (56) binary_expr -> expression DOTMUL . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 100
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 74

    (57) binary_expr -> expression DOTDIV . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 101
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 75

    (58) binary_expr -> expression < . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 102
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 76

    (59) binary_expr -> expression > . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 103
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 77

    (60) binary_expr -> expression ELESS . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 104
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 78

    (61) binary_expr -> expression EGREATER . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 105
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 79

    (62) binary_expr -> expression EQUALS . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 106
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 80

    (63) binary_expr -> expression NEQUALS . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 107
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 81

    (65) transposition -> expression ' .

    +               reduce using rule 65 (transposition -> expression ' .)
    -               reduce using rule 65 (transposition -> expression ' .)
    *               reduce using rule 65 (transposition -> expression ' .)
    /               reduce using rule 65 (transposition -> expression ' .)
    DOTADD          reduce using rule 65 (transposition -> expression ' .)
    DOTSUB          reduce using rule 65 (transposition -> expression ' .)
    DOTMUL          reduce using rule 65 (transposition -> expression ' .)
    DOTDIV          reduce using rule 65 (transposition -> expression ' .)
    <               reduce using rule 65 (transposition -> expression ' .)
    >               reduce using rule 65 (transposition -> expression ' .)
    ELESS           reduce using rule 65 (transposition -> expression ' .)
    EGREATER        reduce using rule 65 (transposition -> expression ' .)
    EQUALS          reduce using rule 65 (transposition -> expression ' .)
    NEQUALS         reduce using rule 65 (transposition -> expression ' .)
    '               reduce using rule 65 (transposition -> expression ' .)
    ;               reduce using rule 65 (transposition -> expression ' .)
    ,               reduce using rule 65 (transposition -> expression ' .)
    )               reduce using rule 65 (transposition -> expression ' .)
    ]               reduce using rule 65 (transposition -> expression ' .)
    :               reduce using rule 65 (transposition -> expression ' .)
    {               reduce using rule 65 (transposition -> expression ' .)
    IF              reduce using rule 65 (transposition -> expression ' .)
    RETURN          reduce using rule 65 (transposition -> expression ' .)
    PRINT           reduce using rule 65 (transposition -> expression ' .)
    BREAK           reduce using rule 65 (transposition -> expression ' .)
    CONTINUE        reduce using rule 65 (transposition -> expression ' .)
    FOR             reduce using rule 65 (transposition -> expression ' .)
    WHILE           reduce using rule 65 (transposition -> expression ' .)
    ID              reduce using rule 65 (transposition -> expression ' .)


state 82

    (68) vector_1 -> [ . vector_2 ]
    (69) vector_2 -> . vector_2 , expression
    (70) vector_2 -> . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    vector_2                       shift and go to state 108
    expression                     shift and go to state 109
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 83

    (66) matrix -> [ vector_1 . ]
    (67) vector_1 -> vector_1 . , [ vector_2 ]

    ]               shift and go to state 110
    ,               shift and go to state 111


state 84

    (47) bracketed -> ( expression . )
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    )               shift and go to state 112
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 85

    (71) matrix_function -> function_name ( . function_args )
    (75) function_args -> . function_args , expression
    (76) function_args -> . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    function_name                  shift and go to state 44
    function_args                  shift and go to state 113
    expression                     shift and go to state 92
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23

state 86

    (64) uminus -> - expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 64 (uminus -> - expression .)
    -               reduce using rule 64 (uminus -> - expression .)
    *               reduce using rule 64 (uminus -> - expression .)
    /               reduce using rule 64 (uminus -> - expression .)
    DOTADD          reduce using rule 64 (uminus -> - expression .)
    DOTSUB          reduce using rule 64 (uminus -> - expression .)
    DOTMUL          reduce using rule 64 (uminus -> - expression .)
    DOTDIV          reduce using rule 64 (uminus -> - expression .)
    <               reduce using rule 64 (uminus -> - expression .)
    >               reduce using rule 64 (uminus -> - expression .)
    ELESS           reduce using rule 64 (uminus -> - expression .)
    EGREATER        reduce using rule 64 (uminus -> - expression .)
    EQUALS          reduce using rule 64 (uminus -> - expression .)
    NEQUALS         reduce using rule 64 (uminus -> - expression .)
    '               reduce using rule 64 (uminus -> - expression .)
    ;               reduce using rule 64 (uminus -> - expression .)
    ,               reduce using rule 64 (uminus -> - expression .)
    )               reduce using rule 64 (uminus -> - expression .)
    ]               reduce using rule 64 (uminus -> - expression .)
    :               reduce using rule 64 (uminus -> - expression .)
    {               reduce using rule 64 (uminus -> - expression .)
    IF              reduce using rule 64 (uminus -> - expression .)
    RETURN          reduce using rule 64 (uminus -> - expression .)
    PRINT           reduce using rule 64 (uminus -> - expression .)
    BREAK           reduce using rule 64 (uminus -> - expression .)
    CONTINUE        reduce using rule 64 (uminus -> - expression .)
    FOR             reduce using rule 64 (uminus -> - expression .)
    WHILE           reduce using rule 64 (uminus -> - expression .)
    ID              reduce using rule 64 (uminus -> - expression .)

  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 71 ]
  ! DOTSUB          [ shift and go to state 72 ]
  ! DOTMUL          [ shift and go to state 73 ]
  ! DOTDIV          [ shift and go to state 74 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]
  ! '               [ shift and go to state 81 ]


state 87

    (23) assignment -> assignable assign_operator expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    ;               reduce using rule 23 (assignment -> assignable assign_operator expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 88

    (33) printable_list -> printable_list , . printable
    (35) printable -> . string
    (36) printable -> . expression
    (37) string -> . STRING
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    STRING          shift and go to state 59
    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    printable                      shift and go to state 114
    string                         shift and go to state 57
    expression                     shift and go to state 58
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 89

    (19) for -> FOR ID = . expression : expression instruction
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 115
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 90

    (20) while -> WHILE ( expression . ) instruction
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    )               shift and go to state 116
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 91

    (30) assignable -> id [ function_args . ]
    (75) function_args -> function_args . , expression

    ]               shift and go to state 117
    ,               shift and go to state 118


state 92

    (76) function_args -> expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    ]               reduce using rule 76 (function_args -> expression .)
    ,               reduce using rule 76 (function_args -> expression .)
    )               reduce using rule 76 (function_args -> expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 93

    (15) if -> IF ( expression ) . instruction
    (16) if -> IF ( expression ) . instruction ELSE instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    instruction                    shift and go to state 119
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 94

    (50) binary_expr -> expression + expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 50 (binary_expr -> expression + expression .)
    -               reduce using rule 50 (binary_expr -> expression + expression .)
    <               reduce using rule 50 (binary_expr -> expression + expression .)
    >               reduce using rule 50 (binary_expr -> expression + expression .)
    ELESS           reduce using rule 50 (binary_expr -> expression + expression .)
    EGREATER        reduce using rule 50 (binary_expr -> expression + expression .)
    EQUALS          reduce using rule 50 (binary_expr -> expression + expression .)
    NEQUALS         reduce using rule 50 (binary_expr -> expression + expression .)
    ;               reduce using rule 50 (binary_expr -> expression + expression .)
    ,               reduce using rule 50 (binary_expr -> expression + expression .)
    )               reduce using rule 50 (binary_expr -> expression + expression .)
    ]               reduce using rule 50 (binary_expr -> expression + expression .)
    :               reduce using rule 50 (binary_expr -> expression + expression .)
    {               reduce using rule 50 (binary_expr -> expression + expression .)
    IF              reduce using rule 50 (binary_expr -> expression + expression .)
    RETURN          reduce using rule 50 (binary_expr -> expression + expression .)
    PRINT           reduce using rule 50 (binary_expr -> expression + expression .)
    BREAK           reduce using rule 50 (binary_expr -> expression + expression .)
    CONTINUE        reduce using rule 50 (binary_expr -> expression + expression .)
    FOR             reduce using rule 50 (binary_expr -> expression + expression .)
    WHILE           reduce using rule 50 (binary_expr -> expression + expression .)
    ID              reduce using rule 50 (binary_expr -> expression + expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! *               [ reduce using rule 50 (binary_expr -> expression + expression .) ]
  ! /               [ reduce using rule 50 (binary_expr -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 50 (binary_expr -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 50 (binary_expr -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 50 (binary_expr -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 50 (binary_expr -> expression + expression .) ]
  ! '               [ reduce using rule 50 (binary_expr -> expression + expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 95

    (51) binary_expr -> expression - expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 51 (binary_expr -> expression - expression .)
    -               reduce using rule 51 (binary_expr -> expression - expression .)
    <               reduce using rule 51 (binary_expr -> expression - expression .)
    >               reduce using rule 51 (binary_expr -> expression - expression .)
    ELESS           reduce using rule 51 (binary_expr -> expression - expression .)
    EGREATER        reduce using rule 51 (binary_expr -> expression - expression .)
    EQUALS          reduce using rule 51 (binary_expr -> expression - expression .)
    NEQUALS         reduce using rule 51 (binary_expr -> expression - expression .)
    ;               reduce using rule 51 (binary_expr -> expression - expression .)
    ,               reduce using rule 51 (binary_expr -> expression - expression .)
    )               reduce using rule 51 (binary_expr -> expression - expression .)
    ]               reduce using rule 51 (binary_expr -> expression - expression .)
    :               reduce using rule 51 (binary_expr -> expression - expression .)
    {               reduce using rule 51 (binary_expr -> expression - expression .)
    IF              reduce using rule 51 (binary_expr -> expression - expression .)
    RETURN          reduce using rule 51 (binary_expr -> expression - expression .)
    PRINT           reduce using rule 51 (binary_expr -> expression - expression .)
    BREAK           reduce using rule 51 (binary_expr -> expression - expression .)
    CONTINUE        reduce using rule 51 (binary_expr -> expression - expression .)
    FOR             reduce using rule 51 (binary_expr -> expression - expression .)
    WHILE           reduce using rule 51 (binary_expr -> expression - expression .)
    ID              reduce using rule 51 (binary_expr -> expression - expression .)
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! *               [ reduce using rule 51 (binary_expr -> expression - expression .) ]
  ! /               [ reduce using rule 51 (binary_expr -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 51 (binary_expr -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 51 (binary_expr -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 51 (binary_expr -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 51 (binary_expr -> expression - expression .) ]
  ! '               [ reduce using rule 51 (binary_expr -> expression - expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 96

    (52) binary_expr -> expression * expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 52 (binary_expr -> expression * expression .)
    -               reduce using rule 52 (binary_expr -> expression * expression .)
    *               reduce using rule 52 (binary_expr -> expression * expression .)
    /               reduce using rule 52 (binary_expr -> expression * expression .)
    <               reduce using rule 52 (binary_expr -> expression * expression .)
    >               reduce using rule 52 (binary_expr -> expression * expression .)
    ELESS           reduce using rule 52 (binary_expr -> expression * expression .)
    EGREATER        reduce using rule 52 (binary_expr -> expression * expression .)
    EQUALS          reduce using rule 52 (binary_expr -> expression * expression .)
    NEQUALS         reduce using rule 52 (binary_expr -> expression * expression .)
    ;               reduce using rule 52 (binary_expr -> expression * expression .)
    ,               reduce using rule 52 (binary_expr -> expression * expression .)
    )               reduce using rule 52 (binary_expr -> expression * expression .)
    ]               reduce using rule 52 (binary_expr -> expression * expression .)
    :               reduce using rule 52 (binary_expr -> expression * expression .)
    {               reduce using rule 52 (binary_expr -> expression * expression .)
    IF              reduce using rule 52 (binary_expr -> expression * expression .)
    RETURN          reduce using rule 52 (binary_expr -> expression * expression .)
    PRINT           reduce using rule 52 (binary_expr -> expression * expression .)
    BREAK           reduce using rule 52 (binary_expr -> expression * expression .)
    CONTINUE        reduce using rule 52 (binary_expr -> expression * expression .)
    FOR             reduce using rule 52 (binary_expr -> expression * expression .)
    WHILE           reduce using rule 52 (binary_expr -> expression * expression .)
    ID              reduce using rule 52 (binary_expr -> expression * expression .)
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! DOTADD          [ reduce using rule 52 (binary_expr -> expression * expression .) ]
  ! DOTSUB          [ reduce using rule 52 (binary_expr -> expression * expression .) ]
  ! DOTMUL          [ reduce using rule 52 (binary_expr -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 52 (binary_expr -> expression * expression .) ]
  ! '               [ reduce using rule 52 (binary_expr -> expression * expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 97

    (53) binary_expr -> expression / expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 53 (binary_expr -> expression / expression .)
    -               reduce using rule 53 (binary_expr -> expression / expression .)
    *               reduce using rule 53 (binary_expr -> expression / expression .)
    /               reduce using rule 53 (binary_expr -> expression / expression .)
    <               reduce using rule 53 (binary_expr -> expression / expression .)
    >               reduce using rule 53 (binary_expr -> expression / expression .)
    ELESS           reduce using rule 53 (binary_expr -> expression / expression .)
    EGREATER        reduce using rule 53 (binary_expr -> expression / expression .)
    EQUALS          reduce using rule 53 (binary_expr -> expression / expression .)
    NEQUALS         reduce using rule 53 (binary_expr -> expression / expression .)
    ;               reduce using rule 53 (binary_expr -> expression / expression .)
    ,               reduce using rule 53 (binary_expr -> expression / expression .)
    )               reduce using rule 53 (binary_expr -> expression / expression .)
    ]               reduce using rule 53 (binary_expr -> expression / expression .)
    :               reduce using rule 53 (binary_expr -> expression / expression .)
    {               reduce using rule 53 (binary_expr -> expression / expression .)
    IF              reduce using rule 53 (binary_expr -> expression / expression .)
    RETURN          reduce using rule 53 (binary_expr -> expression / expression .)
    PRINT           reduce using rule 53 (binary_expr -> expression / expression .)
    BREAK           reduce using rule 53 (binary_expr -> expression / expression .)
    CONTINUE        reduce using rule 53 (binary_expr -> expression / expression .)
    FOR             reduce using rule 53 (binary_expr -> expression / expression .)
    WHILE           reduce using rule 53 (binary_expr -> expression / expression .)
    ID              reduce using rule 53 (binary_expr -> expression / expression .)
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! DOTADD          [ reduce using rule 53 (binary_expr -> expression / expression .) ]
  ! DOTSUB          [ reduce using rule 53 (binary_expr -> expression / expression .) ]
  ! DOTMUL          [ reduce using rule 53 (binary_expr -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 53 (binary_expr -> expression / expression .) ]
  ! '               [ reduce using rule 53 (binary_expr -> expression / expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 98

    (54) binary_expr -> expression DOTADD expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    -               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    *               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    /               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    DOTADD          reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    DOTSUB          reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    <               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    >               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    ELESS           reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    EGREATER        reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    EQUALS          reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    NEQUALS         reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    ;               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    ,               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    )               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    ]               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    :               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    {               reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    IF              reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    RETURN          reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    PRINT           reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    BREAK           reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    CONTINUE        reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    FOR             reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    WHILE           reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    ID              reduce using rule 54 (binary_expr -> expression DOTADD expression .)
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! DOTMUL          [ reduce using rule 54 (binary_expr -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 54 (binary_expr -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 54 (binary_expr -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 71 ]
  ! DOTSUB          [ shift and go to state 72 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 99

    (55) binary_expr -> expression DOTSUB expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    -               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    *               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    /               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    DOTADD          reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    <               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    >               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    ELESS           reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    EGREATER        reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    EQUALS          reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    NEQUALS         reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    ;               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    ,               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    )               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    ]               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    :               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    {               reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    IF              reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    RETURN          reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    PRINT           reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    BREAK           reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    FOR             reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    WHILE           reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    ID              reduce using rule 55 (binary_expr -> expression DOTSUB expression .)
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! DOTMUL          [ reduce using rule 55 (binary_expr -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 55 (binary_expr -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 55 (binary_expr -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 71 ]
  ! DOTSUB          [ shift and go to state 72 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 100

    (56) binary_expr -> expression DOTMUL expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    -               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    *               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    /               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    DOTADD          reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    <               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    >               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    ELESS           reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    EGREATER        reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    EQUALS          reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    NEQUALS         reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    ;               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    ,               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    )               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    ]               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    :               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    {               reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    IF              reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    RETURN          reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    PRINT           reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    BREAK           reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    FOR             reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    WHILE           reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    ID              reduce using rule 56 (binary_expr -> expression DOTMUL expression .)
    '               shift and go to state 81

  ! '               [ reduce using rule 56 (binary_expr -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 71 ]
  ! DOTSUB          [ shift and go to state 72 ]
  ! DOTMUL          [ shift and go to state 73 ]
  ! DOTDIV          [ shift and go to state 74 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 101

    (57) binary_expr -> expression DOTDIV expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    +               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    -               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    *               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    /               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    DOTADD          reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    <               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    >               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    ELESS           reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    EGREATER        reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    EQUALS          reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    NEQUALS         reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    ;               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    ,               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    )               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    ]               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    :               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    {               reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    IF              reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    RETURN          reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    PRINT           reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    BREAK           reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    FOR             reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    WHILE           reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    ID              reduce using rule 57 (binary_expr -> expression DOTDIV expression .)
    '               shift and go to state 81

  ! '               [ reduce using rule 57 (binary_expr -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 67 ]
  ! -               [ shift and go to state 68 ]
  ! *               [ shift and go to state 69 ]
  ! /               [ shift and go to state 70 ]
  ! DOTADD          [ shift and go to state 71 ]
  ! DOTSUB          [ shift and go to state 72 ]
  ! DOTMUL          [ shift and go to state 73 ]
  ! DOTDIV          [ shift and go to state 74 ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 102

    (58) binary_expr -> expression < expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    <               reduce using rule 58 (binary_expr -> expression < expression .)
    >               reduce using rule 58 (binary_expr -> expression < expression .)
    ELESS           reduce using rule 58 (binary_expr -> expression < expression .)
    EGREATER        reduce using rule 58 (binary_expr -> expression < expression .)
    EQUALS          reduce using rule 58 (binary_expr -> expression < expression .)
    NEQUALS         reduce using rule 58 (binary_expr -> expression < expression .)
    ;               reduce using rule 58 (binary_expr -> expression < expression .)
    ,               reduce using rule 58 (binary_expr -> expression < expression .)
    )               reduce using rule 58 (binary_expr -> expression < expression .)
    ]               reduce using rule 58 (binary_expr -> expression < expression .)
    :               reduce using rule 58 (binary_expr -> expression < expression .)
    {               reduce using rule 58 (binary_expr -> expression < expression .)
    IF              reduce using rule 58 (binary_expr -> expression < expression .)
    RETURN          reduce using rule 58 (binary_expr -> expression < expression .)
    PRINT           reduce using rule 58 (binary_expr -> expression < expression .)
    BREAK           reduce using rule 58 (binary_expr -> expression < expression .)
    CONTINUE        reduce using rule 58 (binary_expr -> expression < expression .)
    FOR             reduce using rule 58 (binary_expr -> expression < expression .)
    WHILE           reduce using rule 58 (binary_expr -> expression < expression .)
    ID              reduce using rule 58 (binary_expr -> expression < expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! -               [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! *               [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! /               [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! DOTADD          [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! DOTSUB          [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! DOTMUL          [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! DOTDIV          [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! '               [ reduce using rule 58 (binary_expr -> expression < expression .) ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 103

    (59) binary_expr -> expression > expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    <               reduce using rule 59 (binary_expr -> expression > expression .)
    >               reduce using rule 59 (binary_expr -> expression > expression .)
    ELESS           reduce using rule 59 (binary_expr -> expression > expression .)
    EGREATER        reduce using rule 59 (binary_expr -> expression > expression .)
    EQUALS          reduce using rule 59 (binary_expr -> expression > expression .)
    NEQUALS         reduce using rule 59 (binary_expr -> expression > expression .)
    ;               reduce using rule 59 (binary_expr -> expression > expression .)
    ,               reduce using rule 59 (binary_expr -> expression > expression .)
    )               reduce using rule 59 (binary_expr -> expression > expression .)
    ]               reduce using rule 59 (binary_expr -> expression > expression .)
    :               reduce using rule 59 (binary_expr -> expression > expression .)
    {               reduce using rule 59 (binary_expr -> expression > expression .)
    IF              reduce using rule 59 (binary_expr -> expression > expression .)
    RETURN          reduce using rule 59 (binary_expr -> expression > expression .)
    PRINT           reduce using rule 59 (binary_expr -> expression > expression .)
    BREAK           reduce using rule 59 (binary_expr -> expression > expression .)
    CONTINUE        reduce using rule 59 (binary_expr -> expression > expression .)
    FOR             reduce using rule 59 (binary_expr -> expression > expression .)
    WHILE           reduce using rule 59 (binary_expr -> expression > expression .)
    ID              reduce using rule 59 (binary_expr -> expression > expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! -               [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! *               [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! /               [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! DOTADD          [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! DOTSUB          [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! DOTMUL          [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! DOTDIV          [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! '               [ reduce using rule 59 (binary_expr -> expression > expression .) ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 104

    (60) binary_expr -> expression ELESS expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    <               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    >               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    ELESS           reduce using rule 60 (binary_expr -> expression ELESS expression .)
    EGREATER        reduce using rule 60 (binary_expr -> expression ELESS expression .)
    EQUALS          reduce using rule 60 (binary_expr -> expression ELESS expression .)
    NEQUALS         reduce using rule 60 (binary_expr -> expression ELESS expression .)
    ;               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    ,               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    )               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    ]               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    :               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    {               reduce using rule 60 (binary_expr -> expression ELESS expression .)
    IF              reduce using rule 60 (binary_expr -> expression ELESS expression .)
    RETURN          reduce using rule 60 (binary_expr -> expression ELESS expression .)
    PRINT           reduce using rule 60 (binary_expr -> expression ELESS expression .)
    BREAK           reduce using rule 60 (binary_expr -> expression ELESS expression .)
    CONTINUE        reduce using rule 60 (binary_expr -> expression ELESS expression .)
    FOR             reduce using rule 60 (binary_expr -> expression ELESS expression .)
    WHILE           reduce using rule 60 (binary_expr -> expression ELESS expression .)
    ID              reduce using rule 60 (binary_expr -> expression ELESS expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! -               [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! *               [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! /               [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! DOTADD          [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! DOTSUB          [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! DOTMUL          [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! DOTDIV          [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! '               [ reduce using rule 60 (binary_expr -> expression ELESS expression .) ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 105

    (61) binary_expr -> expression EGREATER expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    <               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    >               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    ELESS           reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    EGREATER        reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    EQUALS          reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    NEQUALS         reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    ;               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    ,               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    )               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    ]               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    :               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    {               reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    IF              reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    RETURN          reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    PRINT           reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    BREAK           reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    CONTINUE        reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    FOR             reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    WHILE           reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    ID              reduce using rule 61 (binary_expr -> expression EGREATER expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! -               [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! *               [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! /               [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! DOTADD          [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! DOTSUB          [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! DOTMUL          [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! DOTDIV          [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! '               [ reduce using rule 61 (binary_expr -> expression EGREATER expression .) ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 106

    (62) binary_expr -> expression EQUALS expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    <               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    >               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    ELESS           reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    EGREATER        reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    EQUALS          reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    NEQUALS         reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    ;               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    ,               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    )               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    ]               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    :               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    {               reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    IF              reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    RETURN          reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    PRINT           reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    BREAK           reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    CONTINUE        reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    FOR             reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    WHILE           reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    ID              reduce using rule 62 (binary_expr -> expression EQUALS expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! -               [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! *               [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! /               [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! DOTADD          [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! DOTSUB          [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! DOTMUL          [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! DOTDIV          [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! '               [ reduce using rule 62 (binary_expr -> expression EQUALS expression .) ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 107

    (63) binary_expr -> expression NEQUALS expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    <               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    >               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    ELESS           reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    EGREATER        reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    EQUALS          reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    NEQUALS         reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    ;               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    ,               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    )               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    ]               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    :               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    {               reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    IF              reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    RETURN          reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    PRINT           reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    BREAK           reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    CONTINUE        reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    FOR             reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    WHILE           reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    ID              reduce using rule 63 (binary_expr -> expression NEQUALS expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    '               shift and go to state 81

  ! +               [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! -               [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! *               [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! /               [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTADD          [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTSUB          [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTMUL          [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTDIV          [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! '               [ reduce using rule 63 (binary_expr -> expression NEQUALS expression .) ]
  ! <               [ shift and go to state 75 ]
  ! >               [ shift and go to state 76 ]
  ! ELESS           [ shift and go to state 77 ]
  ! EGREATER        [ shift and go to state 78 ]
  ! EQUALS          [ shift and go to state 79 ]
  ! NEQUALS         [ shift and go to state 80 ]


state 108

    (68) vector_1 -> [ vector_2 . ]
    (69) vector_2 -> vector_2 . , expression

    ]               shift and go to state 120
    ,               shift and go to state 121


state 109

    (70) vector_2 -> expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    ]               reduce using rule 70 (vector_2 -> expression .)
    ,               reduce using rule 70 (vector_2 -> expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 110

    (66) matrix -> [ vector_1 ] .

    +               reduce using rule 66 (matrix -> [ vector_1 ] .)
    -               reduce using rule 66 (matrix -> [ vector_1 ] .)
    *               reduce using rule 66 (matrix -> [ vector_1 ] .)
    /               reduce using rule 66 (matrix -> [ vector_1 ] .)
    DOTADD          reduce using rule 66 (matrix -> [ vector_1 ] .)
    DOTSUB          reduce using rule 66 (matrix -> [ vector_1 ] .)
    DOTMUL          reduce using rule 66 (matrix -> [ vector_1 ] .)
    DOTDIV          reduce using rule 66 (matrix -> [ vector_1 ] .)
    <               reduce using rule 66 (matrix -> [ vector_1 ] .)
    >               reduce using rule 66 (matrix -> [ vector_1 ] .)
    ELESS           reduce using rule 66 (matrix -> [ vector_1 ] .)
    EGREATER        reduce using rule 66 (matrix -> [ vector_1 ] .)
    EQUALS          reduce using rule 66 (matrix -> [ vector_1 ] .)
    NEQUALS         reduce using rule 66 (matrix -> [ vector_1 ] .)
    '               reduce using rule 66 (matrix -> [ vector_1 ] .)
    ;               reduce using rule 66 (matrix -> [ vector_1 ] .)
    ,               reduce using rule 66 (matrix -> [ vector_1 ] .)
    )               reduce using rule 66 (matrix -> [ vector_1 ] .)
    ]               reduce using rule 66 (matrix -> [ vector_1 ] .)
    :               reduce using rule 66 (matrix -> [ vector_1 ] .)
    {               reduce using rule 66 (matrix -> [ vector_1 ] .)
    IF              reduce using rule 66 (matrix -> [ vector_1 ] .)
    RETURN          reduce using rule 66 (matrix -> [ vector_1 ] .)
    PRINT           reduce using rule 66 (matrix -> [ vector_1 ] .)
    BREAK           reduce using rule 66 (matrix -> [ vector_1 ] .)
    CONTINUE        reduce using rule 66 (matrix -> [ vector_1 ] .)
    FOR             reduce using rule 66 (matrix -> [ vector_1 ] .)
    WHILE           reduce using rule 66 (matrix -> [ vector_1 ] .)
    ID              reduce using rule 66 (matrix -> [ vector_1 ] .)


state 111

    (67) vector_1 -> vector_1 , . [ vector_2 ]

    [               shift and go to state 122


state 112

    (47) bracketed -> ( expression ) .

    +               reduce using rule 47 (bracketed -> ( expression ) .)
    -               reduce using rule 47 (bracketed -> ( expression ) .)
    *               reduce using rule 47 (bracketed -> ( expression ) .)
    /               reduce using rule 47 (bracketed -> ( expression ) .)
    DOTADD          reduce using rule 47 (bracketed -> ( expression ) .)
    DOTSUB          reduce using rule 47 (bracketed -> ( expression ) .)
    DOTMUL          reduce using rule 47 (bracketed -> ( expression ) .)
    DOTDIV          reduce using rule 47 (bracketed -> ( expression ) .)
    <               reduce using rule 47 (bracketed -> ( expression ) .)
    >               reduce using rule 47 (bracketed -> ( expression ) .)
    ELESS           reduce using rule 47 (bracketed -> ( expression ) .)
    EGREATER        reduce using rule 47 (bracketed -> ( expression ) .)
    EQUALS          reduce using rule 47 (bracketed -> ( expression ) .)
    NEQUALS         reduce using rule 47 (bracketed -> ( expression ) .)
    '               reduce using rule 47 (bracketed -> ( expression ) .)
    ;               reduce using rule 47 (bracketed -> ( expression ) .)
    ,               reduce using rule 47 (bracketed -> ( expression ) .)
    )               reduce using rule 47 (bracketed -> ( expression ) .)
    ]               reduce using rule 47 (bracketed -> ( expression ) .)
    :               reduce using rule 47 (bracketed -> ( expression ) .)
    {               reduce using rule 47 (bracketed -> ( expression ) .)
    IF              reduce using rule 47 (bracketed -> ( expression ) .)
    RETURN          reduce using rule 47 (bracketed -> ( expression ) .)
    PRINT           reduce using rule 47 (bracketed -> ( expression ) .)
    BREAK           reduce using rule 47 (bracketed -> ( expression ) .)
    CONTINUE        reduce using rule 47 (bracketed -> ( expression ) .)
    FOR             reduce using rule 47 (bracketed -> ( expression ) .)
    WHILE           reduce using rule 47 (bracketed -> ( expression ) .)
    ID              reduce using rule 47 (bracketed -> ( expression ) .)


state 113

    (71) matrix_function -> function_name ( function_args . )
    (75) function_args -> function_args . , expression

    )               shift and go to state 123
    ,               shift and go to state 118


state 114

    (33) printable_list -> printable_list , printable .

    ,               reduce using rule 33 (printable_list -> printable_list , printable .)
    ;               reduce using rule 33 (printable_list -> printable_list , printable .)


state 115

    (19) for -> FOR ID = expression . : expression instruction
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    :               shift and go to state 124
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 116

    (20) while -> WHILE ( expression ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    instruction                    shift and go to state 125
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 117

    (30) assignable -> id [ function_args ] .

    =               reduce using rule 30 (assignable -> id [ function_args ] .)
    ADDASSIGN       reduce using rule 30 (assignable -> id [ function_args ] .)
    SUBASSIGN       reduce using rule 30 (assignable -> id [ function_args ] .)
    MULASSIGN       reduce using rule 30 (assignable -> id [ function_args ] .)
    DIVASSIGN       reduce using rule 30 (assignable -> id [ function_args ] .)
    +               reduce using rule 30 (assignable -> id [ function_args ] .)
    -               reduce using rule 30 (assignable -> id [ function_args ] .)
    *               reduce using rule 30 (assignable -> id [ function_args ] .)
    /               reduce using rule 30 (assignable -> id [ function_args ] .)
    DOTADD          reduce using rule 30 (assignable -> id [ function_args ] .)
    DOTSUB          reduce using rule 30 (assignable -> id [ function_args ] .)
    DOTMUL          reduce using rule 30 (assignable -> id [ function_args ] .)
    DOTDIV          reduce using rule 30 (assignable -> id [ function_args ] .)
    <               reduce using rule 30 (assignable -> id [ function_args ] .)
    >               reduce using rule 30 (assignable -> id [ function_args ] .)
    ELESS           reduce using rule 30 (assignable -> id [ function_args ] .)
    EGREATER        reduce using rule 30 (assignable -> id [ function_args ] .)
    EQUALS          reduce using rule 30 (assignable -> id [ function_args ] .)
    NEQUALS         reduce using rule 30 (assignable -> id [ function_args ] .)
    '               reduce using rule 30 (assignable -> id [ function_args ] .)
    ;               reduce using rule 30 (assignable -> id [ function_args ] .)
    ,               reduce using rule 30 (assignable -> id [ function_args ] .)
    )               reduce using rule 30 (assignable -> id [ function_args ] .)
    ]               reduce using rule 30 (assignable -> id [ function_args ] .)
    :               reduce using rule 30 (assignable -> id [ function_args ] .)
    {               reduce using rule 30 (assignable -> id [ function_args ] .)
    IF              reduce using rule 30 (assignable -> id [ function_args ] .)
    RETURN          reduce using rule 30 (assignable -> id [ function_args ] .)
    PRINT           reduce using rule 30 (assignable -> id [ function_args ] .)
    BREAK           reduce using rule 30 (assignable -> id [ function_args ] .)
    CONTINUE        reduce using rule 30 (assignable -> id [ function_args ] .)
    FOR             reduce using rule 30 (assignable -> id [ function_args ] .)
    WHILE           reduce using rule 30 (assignable -> id [ function_args ] .)
    ID              reduce using rule 30 (assignable -> id [ function_args ] .)


state 118

    (75) function_args -> function_args , . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 126
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 119

    (15) if -> IF ( expression ) instruction .
    (16) if -> IF ( expression ) instruction . ELSE instruction

    {               reduce using rule 15 (if -> IF ( expression ) instruction .)
    IF              reduce using rule 15 (if -> IF ( expression ) instruction .)
    RETURN          reduce using rule 15 (if -> IF ( expression ) instruction .)
    PRINT           reduce using rule 15 (if -> IF ( expression ) instruction .)
    BREAK           reduce using rule 15 (if -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 15 (if -> IF ( expression ) instruction .)
    FOR             reduce using rule 15 (if -> IF ( expression ) instruction .)
    WHILE           reduce using rule 15 (if -> IF ( expression ) instruction .)
    ID              reduce using rule 15 (if -> IF ( expression ) instruction .)
    $end            reduce using rule 15 (if -> IF ( expression ) instruction .)
    }               reduce using rule 15 (if -> IF ( expression ) instruction .)
    ELSE            shift and go to state 127

  ! ELSE            [ reduce using rule 15 (if -> IF ( expression ) instruction .) ]


state 120

    (68) vector_1 -> [ vector_2 ] .

    ]               reduce using rule 68 (vector_1 -> [ vector_2 ] .)
    ,               reduce using rule 68 (vector_1 -> [ vector_2 ] .)


state 121

    (69) vector_2 -> vector_2 , . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 128
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 122

    (67) vector_1 -> vector_1 , [ . vector_2 ]
    (69) vector_2 -> . vector_2 , expression
    (70) vector_2 -> . expression
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    vector_2                       shift and go to state 129
    expression                     shift and go to state 109
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 123

    (71) matrix_function -> function_name ( function_args ) .

    +               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    -               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    *               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    /               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    DOTADD          reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    DOTSUB          reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    DOTMUL          reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    DOTDIV          reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    <               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    >               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    ELESS           reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    EGREATER        reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    EQUALS          reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    NEQUALS         reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    '               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    ;               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    ,               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    )               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    ]               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    :               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    {               reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    IF              reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    RETURN          reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    PRINT           reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    BREAK           reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    CONTINUE        reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    FOR             reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    WHILE           reduce using rule 71 (matrix_function -> function_name ( function_args ) .)
    ID              reduce using rule 71 (matrix_function -> function_name ( function_args ) .)


state 124

    (19) for -> FOR ID = expression : . expression instruction
    (38) expression -> . int
    (39) expression -> . float
    (40) expression -> . assignable
    (41) expression -> . bracketed
    (42) expression -> . matrix
    (43) expression -> . matrix_function
    (44) expression -> . binary_expr
    (45) expression -> . uminus
    (46) expression -> . transposition
    (48) int -> . INTNUM
    (49) float -> . FLOATNUM
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (47) bracketed -> . ( expression )
    (66) matrix -> . [ vector_1 ]
    (71) matrix_function -> . function_name ( function_args )
    (50) binary_expr -> . expression + expression
    (51) binary_expr -> . expression - expression
    (52) binary_expr -> . expression * expression
    (53) binary_expr -> . expression / expression
    (54) binary_expr -> . expression DOTADD expression
    (55) binary_expr -> . expression DOTSUB expression
    (56) binary_expr -> . expression DOTMUL expression
    (57) binary_expr -> . expression DOTDIV expression
    (58) binary_expr -> . expression < expression
    (59) binary_expr -> . expression > expression
    (60) binary_expr -> . expression ELESS expression
    (61) binary_expr -> . expression EGREATER expression
    (62) binary_expr -> . expression EQUALS expression
    (63) binary_expr -> . expression NEQUALS expression
    (64) uminus -> . - expression
    (65) transposition -> . expression '
    (31) id -> . ID
    (72) function_name -> . EYE
    (73) function_name -> . ZEROS
    (74) function_name -> . ONES

    INTNUM          shift and go to state 40
    FLOATNUM        shift and go to state 41
    (               shift and go to state 43
    [               shift and go to state 42
    -               shift and go to state 45
    ID              shift and go to state 21
    EYE             shift and go to state 46
    ZEROS           shift and go to state 47
    ONES            shift and go to state 48

    expression                     shift and go to state 130
    int                            shift and go to state 31
    float                          shift and go to state 32
    assignable                     shift and go to state 33
    bracketed                      shift and go to state 34
    matrix                         shift and go to state 35
    matrix_function                shift and go to state 36
    binary_expr                    shift and go to state 37
    uminus                         shift and go to state 38
    transposition                  shift and go to state 39
    id                             shift and go to state 23
    function_name                  shift and go to state 44

state 125

    (20) while -> WHILE ( expression ) instruction .

    {               reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    IF              reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    ID              reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    $end            reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    }               reduce using rule 20 (while -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 20 (while -> WHILE ( expression ) instruction .)


state 126

    (75) function_args -> function_args , expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    ]               reduce using rule 75 (function_args -> function_args , expression .)
    ,               reduce using rule 75 (function_args -> function_args , expression .)
    )               reduce using rule 75 (function_args -> function_args , expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 127

    (16) if -> IF ( expression ) instruction ELSE . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    instruction                    shift and go to state 131
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 128

    (69) vector_2 -> vector_2 , expression .
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '

    ]               reduce using rule 69 (vector_2 -> vector_2 , expression .)
    ,               reduce using rule 69 (vector_2 -> vector_2 , expression .)
    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81


state 129

    (67) vector_1 -> vector_1 , [ vector_2 . ]
    (69) vector_2 -> vector_2 . , expression

    ]               shift and go to state 132
    ,               shift and go to state 121


state 130

    (19) for -> FOR ID = expression : expression . instruction
    (50) binary_expr -> expression . + expression
    (51) binary_expr -> expression . - expression
    (52) binary_expr -> expression . * expression
    (53) binary_expr -> expression . / expression
    (54) binary_expr -> expression . DOTADD expression
    (55) binary_expr -> expression . DOTSUB expression
    (56) binary_expr -> expression . DOTMUL expression
    (57) binary_expr -> expression . DOTDIV expression
    (58) binary_expr -> expression . < expression
    (59) binary_expr -> expression . > expression
    (60) binary_expr -> expression . ELESS expression
    (61) binary_expr -> expression . EGREATER expression
    (62) binary_expr -> expression . EQUALS expression
    (63) binary_expr -> expression . NEQUALS expression
    (65) transposition -> expression . '
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . breakContinue
    (15) if -> . IF ( expression ) instruction
    (16) if -> . IF ( expression ) instruction ELSE instruction
    (17) loop -> . for
    (18) loop -> . while
    (21) return -> . RETURN
    (22) return -> . RETURN expression
    (23) assignment -> . assignable assign_operator expression
    (32) print -> . PRINT printable_list
    (13) breakContinue -> . BREAK ;
    (14) breakContinue -> . CONTINUE ;
    (19) for -> . FOR ID = expression : expression instruction
    (20) while -> . WHILE ( expression ) instruction
    (29) assignable -> . id
    (30) assignable -> . id [ function_args ]
    (31) id -> . ID

    +               shift and go to state 67
    -               shift and go to state 68
    *               shift and go to state 69
    /               shift and go to state 70
    DOTADD          shift and go to state 71
    DOTSUB          shift and go to state 72
    DOTMUL          shift and go to state 73
    DOTDIV          shift and go to state 74
    <               shift and go to state 75
    >               shift and go to state 76
    ELESS           shift and go to state 77
    EGREATER        shift and go to state 78
    EQUALS          shift and go to state 79
    NEQUALS         shift and go to state 80
    '               shift and go to state 81
    {               shift and go to state 5
    IF              shift and go to state 12
    RETURN          shift and go to state 15
    PRINT           shift and go to state 17
    BREAK           shift and go to state 18
    CONTINUE        shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 22
    ID              shift and go to state 21

    instruction                    shift and go to state 133
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    breakContinue                  shift and go to state 11
    for                            shift and go to state 13
    while                          shift and go to state 14
    assignable                     shift and go to state 16
    id                             shift and go to state 23

state 131

    (16) if -> IF ( expression ) instruction ELSE instruction .

    {               reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 16 (if -> IF ( expression ) instruction ELSE instruction .)


state 132

    (67) vector_1 -> vector_1 , [ vector_2 ] .

    ]               reduce using rule 67 (vector_1 -> vector_1 , [ vector_2 ] .)
    ,               reduce using rule 67 (vector_1 -> vector_1 , [ vector_2 ] .)


state 133

    (19) for -> FOR ID = expression : expression instruction .

    {               reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    IF              reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    RETURN          reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    PRINT           reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    BREAK           reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    CONTINUE        reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    FOR             reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    WHILE           reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    ID              reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    $end            reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    }               reduce using rule 19 (for -> FOR ID = expression : expression instruction .)
    ELSE            reduce using rule 19 (for -> FOR ID = expression : expression instruction .)

