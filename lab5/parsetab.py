
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFXnonassocELSEleft=ADDASSIGNSUBASSIGNMULASSIGNDIVASSIGNnonassoc<>ELESSEGREATEREQUALSNEQUALSleft+-left*/leftDOTADDDOTSUBleftDOTMULDOTDIVleft\'rightUMINUSADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB EGREATER ELESS ELSE EQUALS EYE FLOATNUM FOR ID IF INTNUM MULASSIGN NEQUALS ONES PRINT RETURN STRING SUBASSIGN WHILE ZEROSprogram : instructions_optinstructions_opt : instructions instructions_opt : instructions : instructions instruction\n                    | instruction instruction : \'{\' instructions \'}\' instruction : if\n                   | loop\n                   | return \';\'\n                   | assignment \';\'\n                   | print \';\'\n                   | break \';\'\n                   | continue \';\' break : BREAK continue : CONTINUE if : IF \'(\' expression \')\' instruction %prec IFX\n          | IF \'(\' expression \')\' instruction ELSE instruction loop : for\n            | whilefor : FOR ID \'=\' expression \':\' expression instructionwhile : WHILE \'(\' expression \')\' instructionreturn : RETURN\n              | RETURN expressionassignment : assignable assign_operator expression  assign_operator : \'=\'\n                        | ADDASSIGN\n                        | SUBASSIGN\n                        | MULASSIGN\n                        | DIVASSIGN  assignable : id\n                  | id \'[\' expression \',\' expression \']\' id : IDprint : PRINT printable_listprintable_list : printable_list \',\' printable\n                      | printableprintable : string\n                 | expressionstring : STRINGexpression : int\n                  | float\n                  | assignable\n                  | bracketed\n\n                  | matrix\n                  | matrix_function\n\n                  | binary_expr\n\n                  | uminus\n                  | transposition\n                  bracketed : \'(\' expression \')\'int : INTNUM float : FLOATNUM binary_expr : expression \'+\' expression\n                      | expression \'-\' expression\n                      | expression \'*\' expression\n                      | expression \'/\' expression\n\n                      | expression DOTADD expression\n                      | expression DOTSUB expression\n                      | expression DOTMUL expression\n                      | expression DOTDIV expression\n\n                      | expression \'<\' expression\n                      | expression \'>\' expression\n                      | expression ELESS expression\n                      | expression EGREATER expression\n                      | expression EQUALS expression\n                      | expression NEQUALS expression uminus : \'-\' expression %prec UMINUStransposition : expression "\'" matrix : \'[\' vector_1 \']\' vector_1 : vector_1 \',\' \'[\' vector_2 \']\'\n                    | \'[\' vector_2 \']\' vector_2 : vector_2 \',\' expression\n                    | expression matrix_function :  function_name \'(\' expression \')\' function_name : EYE\n                     | ZEROS\n                     | ONES '
    
_lr_action_items = {'$end':([0,1,2,3,4,6,7,14,15,25,27,28,29,30,31,66,118,124,131,133,],[-3,0,-1,-2,-5,-7,-8,-18,-19,-4,-9,-10,-11,-12,-13,-6,-16,-21,-17,-20,]),'{':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[5,5,-5,5,-7,-8,-18,-19,-32,-30,-4,5,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,5,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,5,-16,-72,-21,5,5,-31,-17,-20,]),'IF':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[13,13,-5,13,-7,-8,-18,-19,-32,-30,-4,13,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,13,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,13,-16,-72,-21,13,13,-31,-17,-20,]),'RETURN':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[16,16,-5,16,-7,-8,-18,-19,-32,-30,-4,16,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,16,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,16,-16,-72,-21,16,16,-31,-17,-20,]),'PRINT':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[18,18,-5,18,-7,-8,-18,-19,-32,-30,-4,18,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,18,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,18,-16,-72,-21,18,18,-31,-17,-20,]),'BREAK':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[19,19,-5,19,-7,-8,-18,-19,-32,-30,-4,19,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,19,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,19,-16,-72,-21,19,19,-31,-17,-20,]),'CONTINUE':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[20,20,-5,20,-7,-8,-18,-19,-32,-30,-4,20,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,20,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,20,-16,-72,-21,20,20,-31,-17,-20,]),'FOR':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[21,21,-5,21,-7,-8,-18,-19,-32,-30,-4,21,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,21,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,21,-16,-72,-21,21,21,-31,-17,-20,]),'WHILE':([0,3,4,5,6,7,14,15,22,24,25,26,27,28,29,30,31,34,35,36,37,38,39,40,41,42,43,44,66,82,87,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,118,122,124,126,129,130,131,133,],[23,23,-5,23,-7,-8,-18,-19,-32,-30,-4,23,-9,-10,-11,-12,-13,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-6,-66,-65,23,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,23,-16,-72,-21,23,23,-31,-17,-20,]),'ID':([0,3,4,5,6,7,14,15,16,18,21,22,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,46,48,52,53,54,55,56,57,64,65,66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,87,89,90,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,116,117,118,120,121,122,123,124,126,129,130,131,133,],[22,22,-5,22,-7,-8,-18,-19,22,22,63,-32,-30,-4,22,-9,-10,-11,-12,-13,22,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,22,22,22,-25,-26,-27,-28,-29,22,22,-6,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-66,22,22,-65,22,22,22,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,22,22,-16,22,22,-72,22,-21,22,22,-31,-17,-20,]),'}':([4,6,7,14,15,25,26,27,28,29,30,31,66,118,124,131,133,],[-5,-7,-8,-18,-19,-4,66,-9,-10,-11,-12,-13,-6,-16,-21,-17,-20,]),'ELSE':([6,7,14,15,27,28,29,30,31,66,118,124,131,133,],[-7,-8,-18,-19,-9,-10,-11,-12,-13,-6,126,-21,-17,-20,]),';':([8,9,10,11,12,16,19,20,22,24,33,34,35,36,37,38,39,40,41,42,43,44,58,59,60,61,62,82,87,88,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,114,122,130,],[27,28,29,30,31,-22,-14,-15,-32,-30,-23,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-33,-35,-36,-37,-38,-66,-65,-24,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,-34,-72,-31,]),'(':([13,16,18,23,32,46,47,48,49,50,51,52,53,54,55,56,57,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[32,46,46,64,46,46,86,46,-73,-74,-75,46,-25,-26,-27,-28,-29,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'INTNUM':([16,18,32,46,48,52,53,54,55,56,57,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[43,43,43,43,43,43,-25,-26,-27,-28,-29,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'FLOATNUM':([16,18,32,46,48,52,53,54,55,56,57,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[44,44,44,44,44,44,-25,-26,-27,-28,-29,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'[':([16,18,22,24,32,45,46,48,52,53,54,55,56,57,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,111,117,120,121,123,],[45,45,-32,65,45,83,45,45,45,-25,-26,-27,-28,-29,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,121,45,45,45,45,]),'-':([16,18,22,24,32,33,34,35,36,37,38,39,40,41,42,43,44,46,48,52,53,54,55,56,57,61,64,65,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,85,86,87,88,89,90,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,117,120,121,122,123,125,127,129,130,],[48,48,-32,-30,48,69,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,48,48,48,-25,-26,-27,-28,-29,69,48,48,69,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-66,48,69,48,-65,69,48,48,69,69,-51,-52,-53,-54,-55,-56,-57,-58,69,69,69,69,69,69,69,-67,-48,69,69,48,48,48,-72,48,69,69,69,-31,]),'EYE':([16,18,32,46,48,52,53,54,55,56,57,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[49,49,49,49,49,49,-25,-26,-27,-28,-29,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'ZEROS':([16,18,32,46,48,52,53,54,55,56,57,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[50,50,50,50,50,50,-25,-26,-27,-28,-29,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ONES':([16,18,32,46,48,52,53,54,55,56,57,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[51,51,51,51,51,51,-25,-26,-27,-28,-29,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'=':([17,22,24,63,130,],[53,-32,-30,90,-31,]),'ADDASSIGN':([17,22,24,130,],[54,-32,-30,-31,]),'SUBASSIGN':([17,22,24,130,],[55,-32,-30,-31,]),'MULASSIGN':([17,22,24,130,],[56,-32,-30,-31,]),'DIVASSIGN':([17,22,24,130,],[57,-32,-30,-31,]),'STRING':([18,89,],[62,62,]),'+':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,68,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,68,68,-66,68,-65,68,68,68,-51,-52,-53,-54,-55,-56,-57,-58,68,68,68,68,68,68,68,-67,-48,68,68,-72,68,68,68,-31,]),'*':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,70,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,70,70,-66,70,-65,70,70,70,70,70,-53,-54,-55,-56,-57,-58,70,70,70,70,70,70,70,-67,-48,70,70,-72,70,70,70,-31,]),'/':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,71,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,71,71,-66,71,-65,71,71,71,71,71,-53,-54,-55,-56,-57,-58,71,71,71,71,71,71,71,-67,-48,71,71,-72,71,71,71,-31,]),'DOTADD':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,72,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,72,72,-66,72,-65,72,72,72,72,72,72,72,-55,-56,-57,-58,72,72,72,72,72,72,72,-67,-48,72,72,-72,72,72,72,-31,]),'DOTSUB':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,73,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,73,73,-66,73,-65,73,73,73,73,73,73,73,-55,-56,-57,-58,73,73,73,73,73,73,73,-67,-48,73,73,-72,73,73,73,-31,]),'DOTMUL':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,74,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,74,74,-66,74,-65,74,74,74,74,74,74,74,74,74,-57,-58,74,74,74,74,74,74,74,-67,-48,74,74,-72,74,74,74,-31,]),'DOTDIV':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,75,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,75,75,-66,75,-65,75,75,75,75,75,75,75,75,75,-57,-58,75,75,75,75,75,75,75,-67,-48,75,75,-72,75,75,75,-31,]),'<':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,76,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,76,76,-66,76,-65,76,76,76,-51,-52,-53,-54,-55,-56,-57,-58,None,None,None,None,None,None,76,-67,-48,76,76,-72,76,76,76,-31,]),'>':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,77,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,77,77,-66,77,-65,77,77,77,-51,-52,-53,-54,-55,-56,-57,-58,None,None,None,None,None,None,77,-67,-48,77,77,-72,77,77,77,-31,]),'ELESS':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,78,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,78,78,-66,78,-65,78,78,78,-51,-52,-53,-54,-55,-56,-57,-58,None,None,None,None,None,None,78,-67,-48,78,78,-72,78,78,78,-31,]),'EGREATER':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,79,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,79,79,-66,79,-65,79,79,79,-51,-52,-53,-54,-55,-56,-57,-58,None,None,None,None,None,None,79,-67,-48,79,79,-72,79,79,79,-31,]),'EQUALS':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,80,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,80,80,-66,80,-65,80,80,80,-51,-52,-53,-54,-55,-56,-57,-58,None,None,None,None,None,None,80,-67,-48,80,80,-72,80,80,80,-31,]),'NEQUALS':([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,81,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,81,81,-66,81,-65,81,81,81,-51,-52,-53,-54,-55,-56,-57,-58,None,None,None,None,None,None,81,-67,-48,81,81,-72,81,81,81,-31,]),"'":([22,24,33,34,35,36,37,38,39,40,41,42,43,44,61,67,82,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,110,112,113,115,122,125,127,129,130,],[-32,-30,82,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,82,82,-66,82,-65,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-67,-48,82,82,-72,82,82,82,-31,]),',':([22,24,34,35,36,37,38,39,40,41,42,43,44,58,59,60,61,62,82,84,87,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,114,119,122,127,128,130,132,],[-32,-30,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,89,-35,-36,-37,-38,-66,111,-65,117,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,120,-71,-67,-48,-34,-69,-72,-70,120,-31,-68,]),')':([22,24,34,35,36,37,38,39,40,41,42,43,44,67,82,85,87,91,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,113,122,130,],[-32,-30,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,93,-66,112,-65,116,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,122,-72,-31,]),']':([22,24,34,35,36,37,38,39,40,41,42,43,44,82,84,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,119,122,125,127,128,130,132,],[-32,-30,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-66,110,-65,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,119,-71,-67,-48,-69,-72,130,-70,132,-31,-68,]),':':([22,24,34,35,36,37,38,39,40,41,42,43,44,82,87,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,112,115,122,130,],[-32,-30,-39,-40,-41,-42,-43,-44,-45,-46,-47,-49,-50,-66,-65,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-62,-63,-64,-67,-48,123,-72,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'instructions_opt':([0,],[2,]),'instructions':([0,5,],[3,26,]),'instruction':([0,3,5,26,93,116,126,129,],[4,25,4,25,118,124,131,133,]),'if':([0,3,5,26,93,116,126,129,],[6,6,6,6,6,6,6,6,]),'loop':([0,3,5,26,93,116,126,129,],[7,7,7,7,7,7,7,7,]),'return':([0,3,5,26,93,116,126,129,],[8,8,8,8,8,8,8,8,]),'assignment':([0,3,5,26,93,116,126,129,],[9,9,9,9,9,9,9,9,]),'print':([0,3,5,26,93,116,126,129,],[10,10,10,10,10,10,10,10,]),'break':([0,3,5,26,93,116,126,129,],[11,11,11,11,11,11,11,11,]),'continue':([0,3,5,26,93,116,126,129,],[12,12,12,12,12,12,12,12,]),'for':([0,3,5,26,93,116,126,129,],[14,14,14,14,14,14,14,14,]),'while':([0,3,5,26,93,116,126,129,],[15,15,15,15,15,15,15,15,]),'assignable':([0,3,5,16,18,26,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,93,116,117,120,121,123,126,129,],[17,17,17,36,36,17,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,17,17,36,36,36,36,17,17,]),'id':([0,3,5,16,18,26,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,93,116,117,120,121,123,126,129,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'expression':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[33,61,67,85,87,88,91,92,94,95,96,97,98,99,100,101,102,103,104,105,106,107,109,113,61,115,125,127,109,129,]),'int':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'float':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'bracketed':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'matrix':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'matrix_function':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'binary_expr':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'uminus':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'transposition':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'function_name':([16,18,32,46,48,52,64,65,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,89,90,117,120,121,123,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'assign_operator':([17,],[52,]),'printable_list':([18,],[58,]),'printable':([18,89,],[59,114,]),'string':([18,89,],[60,60,]),'vector_1':([45,],[84,]),'vector_2':([83,121,],[108,128,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> instructions_opt','program',1,'p_program','Mparser.py',41),
  ('instructions_opt -> instructions','instructions_opt',1,'p_instructions_opt_1','Mparser.py',45),
  ('instructions_opt -> <empty>','instructions_opt',0,'p_instructions_opt_2','Mparser.py',49),
  ('instructions -> instructions instruction','instructions',2,'p_instructions_1','Mparser.py',54),
  ('instructions -> instruction','instructions',1,'p_instructions_1','Mparser.py',55),
  ('instruction -> { instructions }','instruction',3,'p_instructions_3','Mparser.py',62),
  ('instruction -> if','instruction',1,'p_instruction','Mparser.py',69),
  ('instruction -> loop','instruction',1,'p_instruction','Mparser.py',70),
  ('instruction -> return ;','instruction',2,'p_instruction','Mparser.py',71),
  ('instruction -> assignment ;','instruction',2,'p_instruction','Mparser.py',72),
  ('instruction -> print ;','instruction',2,'p_instruction','Mparser.py',73),
  ('instruction -> break ;','instruction',2,'p_instruction','Mparser.py',74),
  ('instruction -> continue ;','instruction',2,'p_instruction','Mparser.py',75),
  ('break -> BREAK','break',1,'p_break','Mparser.py',84),
  ('continue -> CONTINUE','continue',1,'p_continue','Mparser.py',88),
  ('if -> IF ( expression ) instruction','if',5,'p_if','Mparser.py',93),
  ('if -> IF ( expression ) instruction ELSE instruction','if',7,'p_if','Mparser.py',94),
  ('loop -> for','loop',1,'p_loop','Mparser.py',102),
  ('loop -> while','loop',1,'p_loop','Mparser.py',103),
  ('for -> FOR ID = expression : expression instruction','for',7,'p_for','Mparser.py',107),
  ('while -> WHILE ( expression ) instruction','while',5,'p_while','Mparser.py',111),
  ('return -> RETURN','return',1,'p_return','Mparser.py',116),
  ('return -> RETURN expression','return',2,'p_return','Mparser.py',117),
  ('assignment -> assignable assign_operator expression','assignment',3,'p_assignment','Mparser.py',125),
  ('assign_operator -> =','assign_operator',1,'p_assign_operator','Mparser.py',131),
  ('assign_operator -> ADDASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',132),
  ('assign_operator -> SUBASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',133),
  ('assign_operator -> MULASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',134),
  ('assign_operator -> DIVASSIGN','assign_operator',1,'p_assign_operator','Mparser.py',135),
  ('assignable -> id','assignable',1,'p_assignable','Mparser.py',146),
  ('assignable -> id [ expression , expression ]','assignable',6,'p_assignable','Mparser.py',147),
  ('id -> ID','id',1,'p_id','Mparser.py',153),
  ('print -> PRINT printable_list','print',2,'p_print','Mparser.py',157),
  ('printable_list -> printable_list , printable','printable_list',3,'p_printable_list','Mparser.py',162),
  ('printable_list -> printable','printable_list',1,'p_printable_list','Mparser.py',163),
  ('printable -> string','printable',1,'p_printable','Mparser.py',173),
  ('printable -> expression','printable',1,'p_printable','Mparser.py',174),
  ('string -> STRING','string',1,'p_string','Mparser.py',178),
  ('expression -> int','expression',1,'p_expression','Mparser.py',182),
  ('expression -> float','expression',1,'p_expression','Mparser.py',183),
  ('expression -> assignable','expression',1,'p_expression','Mparser.py',184),
  ('expression -> bracketed','expression',1,'p_expression','Mparser.py',185),
  ('expression -> matrix','expression',1,'p_expression','Mparser.py',187),
  ('expression -> matrix_function','expression',1,'p_expression','Mparser.py',188),
  ('expression -> binary_expr','expression',1,'p_expression','Mparser.py',190),
  ('expression -> uminus','expression',1,'p_expression','Mparser.py',192),
  ('expression -> transposition','expression',1,'p_expression','Mparser.py',193),
  ('bracketed -> ( expression )','bracketed',3,'p_bracketed','Mparser.py',198),
  ('int -> INTNUM','int',1,'p_int','Mparser.py',202),
  ('float -> FLOATNUM','float',1,'p_float','Mparser.py',206),
  ('binary_expr -> expression + expression','binary_expr',3,'p_binary_expr','Mparser.py',210),
  ('binary_expr -> expression - expression','binary_expr',3,'p_binary_expr','Mparser.py',211),
  ('binary_expr -> expression * expression','binary_expr',3,'p_binary_expr','Mparser.py',212),
  ('binary_expr -> expression / expression','binary_expr',3,'p_binary_expr','Mparser.py',213),
  ('binary_expr -> expression DOTADD expression','binary_expr',3,'p_binary_expr','Mparser.py',215),
  ('binary_expr -> expression DOTSUB expression','binary_expr',3,'p_binary_expr','Mparser.py',216),
  ('binary_expr -> expression DOTMUL expression','binary_expr',3,'p_binary_expr','Mparser.py',217),
  ('binary_expr -> expression DOTDIV expression','binary_expr',3,'p_binary_expr','Mparser.py',218),
  ('binary_expr -> expression < expression','binary_expr',3,'p_binary_expr','Mparser.py',220),
  ('binary_expr -> expression > expression','binary_expr',3,'p_binary_expr','Mparser.py',221),
  ('binary_expr -> expression ELESS expression','binary_expr',3,'p_binary_expr','Mparser.py',222),
  ('binary_expr -> expression EGREATER expression','binary_expr',3,'p_binary_expr','Mparser.py',223),
  ('binary_expr -> expression EQUALS expression','binary_expr',3,'p_binary_expr','Mparser.py',224),
  ('binary_expr -> expression NEQUALS expression','binary_expr',3,'p_binary_expr','Mparser.py',225),
  ('uminus -> - expression','uminus',2,'p_uminus','Mparser.py',230),
  ("transposition -> expression '",'transposition',2,'p_transposition','Mparser.py',234),
  ('matrix -> [ vector_1 ]','matrix',3,'p_matrix','Mparser.py',239),
  ('vector_1 -> vector_1 , [ vector_2 ]','vector_1',5,'p_vector_1','Mparser.py',243),
  ('vector_1 -> [ vector_2 ]','vector_1',3,'p_vector_1','Mparser.py',244),
  ('vector_2 -> vector_2 , expression','vector_2',3,'p_vector_2','Mparser.py',251),
  ('vector_2 -> expression','vector_2',1,'p_vector_2','Mparser.py',252),
  ('matrix_function -> function_name ( expression )','matrix_function',4,'p_matrix_function','Mparser.py',259),
  ('function_name -> EYE','function_name',1,'p_function_name','Mparser.py',263),
  ('function_name -> ZEROS','function_name',1,'p_function_name','Mparser.py',264),
  ('function_name -> ONES','function_name',1,'p_function_name','Mparser.py',265),
]
