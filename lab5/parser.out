Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> instructions_opt
Rule 2     instructions_opt -> instructions
Rule 3     instructions_opt -> <empty>
Rule 4     instructions -> instructions instruction
Rule 5     instructions -> instruction
Rule 6     instruction -> { instructions }
Rule 7     instruction -> if
Rule 8     instruction -> loop
Rule 9     instruction -> return ;
Rule 10    instruction -> assignment ;
Rule 11    instruction -> print ;
Rule 12    instruction -> break ;
Rule 13    instruction -> continue ;
Rule 14    break -> BREAK
Rule 15    continue -> CONTINUE
Rule 16    if -> IF ( expression ) instruction
Rule 17    if -> IF ( expression ) instruction ELSE instruction
Rule 18    loop -> for
Rule 19    loop -> while
Rule 20    for -> FOR ID = expression : expression instruction
Rule 21    while -> WHILE ( expression ) instruction
Rule 22    return -> RETURN
Rule 23    return -> RETURN expression
Rule 24    assignment -> assignable assign_operator expression
Rule 25    assign_operator -> =
Rule 26    assign_operator -> ADDASSIGN
Rule 27    assign_operator -> SUBASSIGN
Rule 28    assign_operator -> MULASSIGN
Rule 29    assign_operator -> DIVASSIGN
Rule 30    assignable -> id
Rule 31    assignable -> id [ expression , expression ]
Rule 32    id -> ID
Rule 33    print -> PRINT printable_list
Rule 34    printable_list -> printable_list , printable
Rule 35    printable_list -> printable
Rule 36    printable -> string
Rule 37    printable -> expression
Rule 38    string -> STRING
Rule 39    expression -> int
Rule 40    expression -> float
Rule 41    expression -> assignable
Rule 42    expression -> bracketed
Rule 43    expression -> matrix
Rule 44    expression -> matrix_function
Rule 45    expression -> binary_expr
Rule 46    expression -> uminus
Rule 47    expression -> transposition
Rule 48    bracketed -> ( expression )
Rule 49    int -> INTNUM
Rule 50    float -> FLOATNUM
Rule 51    binary_expr -> expression + expression
Rule 52    binary_expr -> expression - expression
Rule 53    binary_expr -> expression * expression
Rule 54    binary_expr -> expression / expression
Rule 55    binary_expr -> expression DOTADD expression
Rule 56    binary_expr -> expression DOTSUB expression
Rule 57    binary_expr -> expression DOTMUL expression
Rule 58    binary_expr -> expression DOTDIV expression
Rule 59    binary_expr -> expression < expression
Rule 60    binary_expr -> expression > expression
Rule 61    binary_expr -> expression ELESS expression
Rule 62    binary_expr -> expression EGREATER expression
Rule 63    binary_expr -> expression EQUALS expression
Rule 64    binary_expr -> expression NEQUALS expression
Rule 65    uminus -> - expression
Rule 66    transposition -> expression '
Rule 67    matrix -> [ vector_1 ]
Rule 68    vector_1 -> vector_1 , [ vector_2 ]
Rule 69    vector_1 -> [ vector_2 ]
Rule 70    vector_2 -> vector_2 , expression
Rule 71    vector_2 -> expression
Rule 72    matrix_function -> function_name ( expression )
Rule 73    function_name -> EYE
Rule 74    function_name -> ZEROS
Rule 75    function_name -> ONES

Terminals, with rules where they appear

'                    : 66
(                    : 16 17 21 48 72
)                    : 16 17 21 48 72
*                    : 53
+                    : 51
,                    : 31 34 68 70
-                    : 52 65
/                    : 54
:                    : 20
;                    : 9 10 11 12 13
<                    : 59
=                    : 20 25
>                    : 60
ADDASSIGN            : 26
BREAK                : 14
CONTINUE             : 15
DIVASSIGN            : 29
DOTADD               : 55
DOTDIV               : 58
DOTMUL               : 57
DOTSUB               : 56
EGREATER             : 62
ELESS                : 61
ELSE                 : 17
EQUALS               : 63
EYE                  : 73
FLOATNUM             : 50
FOR                  : 20
ID                   : 20 32
IF                   : 16 17
INTNUM               : 49
MULASSIGN            : 28
NEQUALS              : 64
ONES                 : 75
PRINT                : 33
RETURN               : 22 23
STRING               : 38
SUBASSIGN            : 27
WHILE                : 21
ZEROS                : 74
[                    : 31 67 68 69
]                    : 31 67 68 69
error                : 
{                    : 6
}                    : 6

Nonterminals, with rules where they appear

assign_operator      : 24
assignable           : 24 41
assignment           : 10
binary_expr          : 45
bracketed            : 42
break                : 12
continue             : 13
expression           : 16 17 20 20 21 23 24 31 31 37 48 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 64 65 66 70 71 72
float                : 40
for                  : 18
function_name        : 72
id                   : 30 31
if                   : 7
instruction          : 4 5 16 17 17 20 21
instructions         : 2 4 6
instructions_opt     : 1
int                  : 39
loop                 : 8
matrix               : 43
matrix_function      : 44
print                : 11
printable            : 34 35
printable_list       : 33 34
program              : 0
return               : 9
string               : 36
transposition        : 47
uminus               : 46
vector_1             : 67 68
vector_2             : 68 69 70
while                : 19

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . instructions_opt
    (2) instructions_opt -> . instructions
    (3) instructions_opt -> .
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    $end            reduce using rule 3 (instructions_opt -> .)
    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    program                        shift and go to state 1
    instructions_opt               shift and go to state 2
    instructions                   shift and go to state 3
    instruction                    shift and go to state 4
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 1

    (0) S' -> program .



state 2

    (1) program -> instructions_opt .

    $end            reduce using rule 1 (program -> instructions_opt .)


state 3

    (2) instructions_opt -> instructions .
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    $end            reduce using rule 2 (instructions_opt -> instructions .)
    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 25
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 4

    (5) instructions -> instruction .

    {               reduce using rule 5 (instructions -> instruction .)
    IF              reduce using rule 5 (instructions -> instruction .)
    RETURN          reduce using rule 5 (instructions -> instruction .)
    PRINT           reduce using rule 5 (instructions -> instruction .)
    BREAK           reduce using rule 5 (instructions -> instruction .)
    CONTINUE        reduce using rule 5 (instructions -> instruction .)
    FOR             reduce using rule 5 (instructions -> instruction .)
    WHILE           reduce using rule 5 (instructions -> instruction .)
    ID              reduce using rule 5 (instructions -> instruction .)
    $end            reduce using rule 5 (instructions -> instruction .)
    }               reduce using rule 5 (instructions -> instruction .)


state 5

    (6) instruction -> { . instructions }
    (4) instructions -> . instructions instruction
    (5) instructions -> . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    instructions                   shift and go to state 26
    instruction                    shift and go to state 4
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 6

    (7) instruction -> if .

    {               reduce using rule 7 (instruction -> if .)
    IF              reduce using rule 7 (instruction -> if .)
    RETURN          reduce using rule 7 (instruction -> if .)
    PRINT           reduce using rule 7 (instruction -> if .)
    BREAK           reduce using rule 7 (instruction -> if .)
    CONTINUE        reduce using rule 7 (instruction -> if .)
    FOR             reduce using rule 7 (instruction -> if .)
    WHILE           reduce using rule 7 (instruction -> if .)
    ID              reduce using rule 7 (instruction -> if .)
    $end            reduce using rule 7 (instruction -> if .)
    }               reduce using rule 7 (instruction -> if .)
    ELSE            reduce using rule 7 (instruction -> if .)


state 7

    (8) instruction -> loop .

    {               reduce using rule 8 (instruction -> loop .)
    IF              reduce using rule 8 (instruction -> loop .)
    RETURN          reduce using rule 8 (instruction -> loop .)
    PRINT           reduce using rule 8 (instruction -> loop .)
    BREAK           reduce using rule 8 (instruction -> loop .)
    CONTINUE        reduce using rule 8 (instruction -> loop .)
    FOR             reduce using rule 8 (instruction -> loop .)
    WHILE           reduce using rule 8 (instruction -> loop .)
    ID              reduce using rule 8 (instruction -> loop .)
    $end            reduce using rule 8 (instruction -> loop .)
    }               reduce using rule 8 (instruction -> loop .)
    ELSE            reduce using rule 8 (instruction -> loop .)


state 8

    (9) instruction -> return . ;

    ;               shift and go to state 27


state 9

    (10) instruction -> assignment . ;

    ;               shift and go to state 28


state 10

    (11) instruction -> print . ;

    ;               shift and go to state 29


state 11

    (12) instruction -> break . ;

    ;               shift and go to state 30


state 12

    (13) instruction -> continue . ;

    ;               shift and go to state 31


state 13

    (16) if -> IF . ( expression ) instruction
    (17) if -> IF . ( expression ) instruction ELSE instruction

    (               shift and go to state 32


state 14

    (18) loop -> for .

    {               reduce using rule 18 (loop -> for .)
    IF              reduce using rule 18 (loop -> for .)
    RETURN          reduce using rule 18 (loop -> for .)
    PRINT           reduce using rule 18 (loop -> for .)
    BREAK           reduce using rule 18 (loop -> for .)
    CONTINUE        reduce using rule 18 (loop -> for .)
    FOR             reduce using rule 18 (loop -> for .)
    WHILE           reduce using rule 18 (loop -> for .)
    ID              reduce using rule 18 (loop -> for .)
    $end            reduce using rule 18 (loop -> for .)
    }               reduce using rule 18 (loop -> for .)
    ELSE            reduce using rule 18 (loop -> for .)


state 15

    (19) loop -> while .

    {               reduce using rule 19 (loop -> while .)
    IF              reduce using rule 19 (loop -> while .)
    RETURN          reduce using rule 19 (loop -> while .)
    PRINT           reduce using rule 19 (loop -> while .)
    BREAK           reduce using rule 19 (loop -> while .)
    CONTINUE        reduce using rule 19 (loop -> while .)
    FOR             reduce using rule 19 (loop -> while .)
    WHILE           reduce using rule 19 (loop -> while .)
    ID              reduce using rule 19 (loop -> while .)
    $end            reduce using rule 19 (loop -> while .)
    }               reduce using rule 19 (loop -> while .)
    ELSE            reduce using rule 19 (loop -> while .)


state 16

    (22) return -> RETURN .
    (23) return -> RETURN . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    ;               reduce using rule 22 (return -> RETURN .)
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 33
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 17

    (24) assignment -> assignable . assign_operator expression
    (25) assign_operator -> . =
    (26) assign_operator -> . ADDASSIGN
    (27) assign_operator -> . SUBASSIGN
    (28) assign_operator -> . MULASSIGN
    (29) assign_operator -> . DIVASSIGN

    =               shift and go to state 53
    ADDASSIGN       shift and go to state 54
    SUBASSIGN       shift and go to state 55
    MULASSIGN       shift and go to state 56
    DIVASSIGN       shift and go to state 57

    assign_operator                shift and go to state 52

state 18

    (33) print -> PRINT . printable_list
    (34) printable_list -> . printable_list , printable
    (35) printable_list -> . printable
    (36) printable -> . string
    (37) printable -> . expression
    (38) string -> . STRING
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    STRING          shift and go to state 62
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    printable_list                 shift and go to state 58
    printable                      shift and go to state 59
    string                         shift and go to state 60
    expression                     shift and go to state 61
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 19

    (14) break -> BREAK .

    ;               reduce using rule 14 (break -> BREAK .)


state 20

    (15) continue -> CONTINUE .

    ;               reduce using rule 15 (continue -> CONTINUE .)


state 21

    (20) for -> FOR . ID = expression : expression instruction

    ID              shift and go to state 63


state 22

    (32) id -> ID .

    [               reduce using rule 32 (id -> ID .)
    =               reduce using rule 32 (id -> ID .)
    ADDASSIGN       reduce using rule 32 (id -> ID .)
    SUBASSIGN       reduce using rule 32 (id -> ID .)
    MULASSIGN       reduce using rule 32 (id -> ID .)
    DIVASSIGN       reduce using rule 32 (id -> ID .)
    +               reduce using rule 32 (id -> ID .)
    -               reduce using rule 32 (id -> ID .)
    *               reduce using rule 32 (id -> ID .)
    /               reduce using rule 32 (id -> ID .)
    DOTADD          reduce using rule 32 (id -> ID .)
    DOTSUB          reduce using rule 32 (id -> ID .)
    DOTMUL          reduce using rule 32 (id -> ID .)
    DOTDIV          reduce using rule 32 (id -> ID .)
    <               reduce using rule 32 (id -> ID .)
    >               reduce using rule 32 (id -> ID .)
    ELESS           reduce using rule 32 (id -> ID .)
    EGREATER        reduce using rule 32 (id -> ID .)
    EQUALS          reduce using rule 32 (id -> ID .)
    NEQUALS         reduce using rule 32 (id -> ID .)
    '               reduce using rule 32 (id -> ID .)
    ;               reduce using rule 32 (id -> ID .)
    ,               reduce using rule 32 (id -> ID .)
    )               reduce using rule 32 (id -> ID .)
    ]               reduce using rule 32 (id -> ID .)
    :               reduce using rule 32 (id -> ID .)
    {               reduce using rule 32 (id -> ID .)
    IF              reduce using rule 32 (id -> ID .)
    RETURN          reduce using rule 32 (id -> ID .)
    PRINT           reduce using rule 32 (id -> ID .)
    BREAK           reduce using rule 32 (id -> ID .)
    CONTINUE        reduce using rule 32 (id -> ID .)
    FOR             reduce using rule 32 (id -> ID .)
    WHILE           reduce using rule 32 (id -> ID .)
    ID              reduce using rule 32 (id -> ID .)


state 23

    (21) while -> WHILE . ( expression ) instruction

    (               shift and go to state 64


state 24

    (30) assignable -> id .
    (31) assignable -> id . [ expression , expression ]

    =               reduce using rule 30 (assignable -> id .)
    ADDASSIGN       reduce using rule 30 (assignable -> id .)
    SUBASSIGN       reduce using rule 30 (assignable -> id .)
    MULASSIGN       reduce using rule 30 (assignable -> id .)
    DIVASSIGN       reduce using rule 30 (assignable -> id .)
    +               reduce using rule 30 (assignable -> id .)
    -               reduce using rule 30 (assignable -> id .)
    *               reduce using rule 30 (assignable -> id .)
    /               reduce using rule 30 (assignable -> id .)
    DOTADD          reduce using rule 30 (assignable -> id .)
    DOTSUB          reduce using rule 30 (assignable -> id .)
    DOTMUL          reduce using rule 30 (assignable -> id .)
    DOTDIV          reduce using rule 30 (assignable -> id .)
    <               reduce using rule 30 (assignable -> id .)
    >               reduce using rule 30 (assignable -> id .)
    ELESS           reduce using rule 30 (assignable -> id .)
    EGREATER        reduce using rule 30 (assignable -> id .)
    EQUALS          reduce using rule 30 (assignable -> id .)
    NEQUALS         reduce using rule 30 (assignable -> id .)
    '               reduce using rule 30 (assignable -> id .)
    ;               reduce using rule 30 (assignable -> id .)
    ,               reduce using rule 30 (assignable -> id .)
    )               reduce using rule 30 (assignable -> id .)
    ]               reduce using rule 30 (assignable -> id .)
    :               reduce using rule 30 (assignable -> id .)
    {               reduce using rule 30 (assignable -> id .)
    IF              reduce using rule 30 (assignable -> id .)
    RETURN          reduce using rule 30 (assignable -> id .)
    PRINT           reduce using rule 30 (assignable -> id .)
    BREAK           reduce using rule 30 (assignable -> id .)
    CONTINUE        reduce using rule 30 (assignable -> id .)
    FOR             reduce using rule 30 (assignable -> id .)
    WHILE           reduce using rule 30 (assignable -> id .)
    ID              reduce using rule 30 (assignable -> id .)
    [               shift and go to state 65


state 25

    (4) instructions -> instructions instruction .

    {               reduce using rule 4 (instructions -> instructions instruction .)
    IF              reduce using rule 4 (instructions -> instructions instruction .)
    RETURN          reduce using rule 4 (instructions -> instructions instruction .)
    PRINT           reduce using rule 4 (instructions -> instructions instruction .)
    BREAK           reduce using rule 4 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 4 (instructions -> instructions instruction .)
    FOR             reduce using rule 4 (instructions -> instructions instruction .)
    WHILE           reduce using rule 4 (instructions -> instructions instruction .)
    ID              reduce using rule 4 (instructions -> instructions instruction .)
    $end            reduce using rule 4 (instructions -> instructions instruction .)
    }               reduce using rule 4 (instructions -> instructions instruction .)


state 26

    (6) instruction -> { instructions . }
    (4) instructions -> instructions . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    }               shift and go to state 66
    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 25
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 27

    (9) instruction -> return ; .

    {               reduce using rule 9 (instruction -> return ; .)
    IF              reduce using rule 9 (instruction -> return ; .)
    RETURN          reduce using rule 9 (instruction -> return ; .)
    PRINT           reduce using rule 9 (instruction -> return ; .)
    BREAK           reduce using rule 9 (instruction -> return ; .)
    CONTINUE        reduce using rule 9 (instruction -> return ; .)
    FOR             reduce using rule 9 (instruction -> return ; .)
    WHILE           reduce using rule 9 (instruction -> return ; .)
    ID              reduce using rule 9 (instruction -> return ; .)
    $end            reduce using rule 9 (instruction -> return ; .)
    }               reduce using rule 9 (instruction -> return ; .)
    ELSE            reduce using rule 9 (instruction -> return ; .)


state 28

    (10) instruction -> assignment ; .

    {               reduce using rule 10 (instruction -> assignment ; .)
    IF              reduce using rule 10 (instruction -> assignment ; .)
    RETURN          reduce using rule 10 (instruction -> assignment ; .)
    PRINT           reduce using rule 10 (instruction -> assignment ; .)
    BREAK           reduce using rule 10 (instruction -> assignment ; .)
    CONTINUE        reduce using rule 10 (instruction -> assignment ; .)
    FOR             reduce using rule 10 (instruction -> assignment ; .)
    WHILE           reduce using rule 10 (instruction -> assignment ; .)
    ID              reduce using rule 10 (instruction -> assignment ; .)
    $end            reduce using rule 10 (instruction -> assignment ; .)
    }               reduce using rule 10 (instruction -> assignment ; .)
    ELSE            reduce using rule 10 (instruction -> assignment ; .)


state 29

    (11) instruction -> print ; .

    {               reduce using rule 11 (instruction -> print ; .)
    IF              reduce using rule 11 (instruction -> print ; .)
    RETURN          reduce using rule 11 (instruction -> print ; .)
    PRINT           reduce using rule 11 (instruction -> print ; .)
    BREAK           reduce using rule 11 (instruction -> print ; .)
    CONTINUE        reduce using rule 11 (instruction -> print ; .)
    FOR             reduce using rule 11 (instruction -> print ; .)
    WHILE           reduce using rule 11 (instruction -> print ; .)
    ID              reduce using rule 11 (instruction -> print ; .)
    $end            reduce using rule 11 (instruction -> print ; .)
    }               reduce using rule 11 (instruction -> print ; .)
    ELSE            reduce using rule 11 (instruction -> print ; .)


state 30

    (12) instruction -> break ; .

    {               reduce using rule 12 (instruction -> break ; .)
    IF              reduce using rule 12 (instruction -> break ; .)
    RETURN          reduce using rule 12 (instruction -> break ; .)
    PRINT           reduce using rule 12 (instruction -> break ; .)
    BREAK           reduce using rule 12 (instruction -> break ; .)
    CONTINUE        reduce using rule 12 (instruction -> break ; .)
    FOR             reduce using rule 12 (instruction -> break ; .)
    WHILE           reduce using rule 12 (instruction -> break ; .)
    ID              reduce using rule 12 (instruction -> break ; .)
    $end            reduce using rule 12 (instruction -> break ; .)
    }               reduce using rule 12 (instruction -> break ; .)
    ELSE            reduce using rule 12 (instruction -> break ; .)


state 31

    (13) instruction -> continue ; .

    {               reduce using rule 13 (instruction -> continue ; .)
    IF              reduce using rule 13 (instruction -> continue ; .)
    RETURN          reduce using rule 13 (instruction -> continue ; .)
    PRINT           reduce using rule 13 (instruction -> continue ; .)
    BREAK           reduce using rule 13 (instruction -> continue ; .)
    CONTINUE        reduce using rule 13 (instruction -> continue ; .)
    FOR             reduce using rule 13 (instruction -> continue ; .)
    WHILE           reduce using rule 13 (instruction -> continue ; .)
    ID              reduce using rule 13 (instruction -> continue ; .)
    $end            reduce using rule 13 (instruction -> continue ; .)
    }               reduce using rule 13 (instruction -> continue ; .)
    ELSE            reduce using rule 13 (instruction -> continue ; .)


state 32

    (16) if -> IF ( . expression ) instruction
    (17) if -> IF ( . expression ) instruction ELSE instruction
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 67
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 33

    (23) return -> RETURN expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    ;               reduce using rule 23 (return -> RETURN expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 34

    (39) expression -> int .

    +               reduce using rule 39 (expression -> int .)
    -               reduce using rule 39 (expression -> int .)
    *               reduce using rule 39 (expression -> int .)
    /               reduce using rule 39 (expression -> int .)
    DOTADD          reduce using rule 39 (expression -> int .)
    DOTSUB          reduce using rule 39 (expression -> int .)
    DOTMUL          reduce using rule 39 (expression -> int .)
    DOTDIV          reduce using rule 39 (expression -> int .)
    <               reduce using rule 39 (expression -> int .)
    >               reduce using rule 39 (expression -> int .)
    ELESS           reduce using rule 39 (expression -> int .)
    EGREATER        reduce using rule 39 (expression -> int .)
    EQUALS          reduce using rule 39 (expression -> int .)
    NEQUALS         reduce using rule 39 (expression -> int .)
    '               reduce using rule 39 (expression -> int .)
    ;               reduce using rule 39 (expression -> int .)
    ,               reduce using rule 39 (expression -> int .)
    )               reduce using rule 39 (expression -> int .)
    ]               reduce using rule 39 (expression -> int .)
    :               reduce using rule 39 (expression -> int .)
    {               reduce using rule 39 (expression -> int .)
    IF              reduce using rule 39 (expression -> int .)
    RETURN          reduce using rule 39 (expression -> int .)
    PRINT           reduce using rule 39 (expression -> int .)
    BREAK           reduce using rule 39 (expression -> int .)
    CONTINUE        reduce using rule 39 (expression -> int .)
    FOR             reduce using rule 39 (expression -> int .)
    WHILE           reduce using rule 39 (expression -> int .)
    ID              reduce using rule 39 (expression -> int .)


state 35

    (40) expression -> float .

    +               reduce using rule 40 (expression -> float .)
    -               reduce using rule 40 (expression -> float .)
    *               reduce using rule 40 (expression -> float .)
    /               reduce using rule 40 (expression -> float .)
    DOTADD          reduce using rule 40 (expression -> float .)
    DOTSUB          reduce using rule 40 (expression -> float .)
    DOTMUL          reduce using rule 40 (expression -> float .)
    DOTDIV          reduce using rule 40 (expression -> float .)
    <               reduce using rule 40 (expression -> float .)
    >               reduce using rule 40 (expression -> float .)
    ELESS           reduce using rule 40 (expression -> float .)
    EGREATER        reduce using rule 40 (expression -> float .)
    EQUALS          reduce using rule 40 (expression -> float .)
    NEQUALS         reduce using rule 40 (expression -> float .)
    '               reduce using rule 40 (expression -> float .)
    ;               reduce using rule 40 (expression -> float .)
    ,               reduce using rule 40 (expression -> float .)
    )               reduce using rule 40 (expression -> float .)
    ]               reduce using rule 40 (expression -> float .)
    :               reduce using rule 40 (expression -> float .)
    {               reduce using rule 40 (expression -> float .)
    IF              reduce using rule 40 (expression -> float .)
    RETURN          reduce using rule 40 (expression -> float .)
    PRINT           reduce using rule 40 (expression -> float .)
    BREAK           reduce using rule 40 (expression -> float .)
    CONTINUE        reduce using rule 40 (expression -> float .)
    FOR             reduce using rule 40 (expression -> float .)
    WHILE           reduce using rule 40 (expression -> float .)
    ID              reduce using rule 40 (expression -> float .)


state 36

    (41) expression -> assignable .

    +               reduce using rule 41 (expression -> assignable .)
    -               reduce using rule 41 (expression -> assignable .)
    *               reduce using rule 41 (expression -> assignable .)
    /               reduce using rule 41 (expression -> assignable .)
    DOTADD          reduce using rule 41 (expression -> assignable .)
    DOTSUB          reduce using rule 41 (expression -> assignable .)
    DOTMUL          reduce using rule 41 (expression -> assignable .)
    DOTDIV          reduce using rule 41 (expression -> assignable .)
    <               reduce using rule 41 (expression -> assignable .)
    >               reduce using rule 41 (expression -> assignable .)
    ELESS           reduce using rule 41 (expression -> assignable .)
    EGREATER        reduce using rule 41 (expression -> assignable .)
    EQUALS          reduce using rule 41 (expression -> assignable .)
    NEQUALS         reduce using rule 41 (expression -> assignable .)
    '               reduce using rule 41 (expression -> assignable .)
    ;               reduce using rule 41 (expression -> assignable .)
    ,               reduce using rule 41 (expression -> assignable .)
    )               reduce using rule 41 (expression -> assignable .)
    ]               reduce using rule 41 (expression -> assignable .)
    :               reduce using rule 41 (expression -> assignable .)
    {               reduce using rule 41 (expression -> assignable .)
    IF              reduce using rule 41 (expression -> assignable .)
    RETURN          reduce using rule 41 (expression -> assignable .)
    PRINT           reduce using rule 41 (expression -> assignable .)
    BREAK           reduce using rule 41 (expression -> assignable .)
    CONTINUE        reduce using rule 41 (expression -> assignable .)
    FOR             reduce using rule 41 (expression -> assignable .)
    WHILE           reduce using rule 41 (expression -> assignable .)
    ID              reduce using rule 41 (expression -> assignable .)


state 37

    (42) expression -> bracketed .

    +               reduce using rule 42 (expression -> bracketed .)
    -               reduce using rule 42 (expression -> bracketed .)
    *               reduce using rule 42 (expression -> bracketed .)
    /               reduce using rule 42 (expression -> bracketed .)
    DOTADD          reduce using rule 42 (expression -> bracketed .)
    DOTSUB          reduce using rule 42 (expression -> bracketed .)
    DOTMUL          reduce using rule 42 (expression -> bracketed .)
    DOTDIV          reduce using rule 42 (expression -> bracketed .)
    <               reduce using rule 42 (expression -> bracketed .)
    >               reduce using rule 42 (expression -> bracketed .)
    ELESS           reduce using rule 42 (expression -> bracketed .)
    EGREATER        reduce using rule 42 (expression -> bracketed .)
    EQUALS          reduce using rule 42 (expression -> bracketed .)
    NEQUALS         reduce using rule 42 (expression -> bracketed .)
    '               reduce using rule 42 (expression -> bracketed .)
    ;               reduce using rule 42 (expression -> bracketed .)
    ,               reduce using rule 42 (expression -> bracketed .)
    )               reduce using rule 42 (expression -> bracketed .)
    ]               reduce using rule 42 (expression -> bracketed .)
    :               reduce using rule 42 (expression -> bracketed .)
    {               reduce using rule 42 (expression -> bracketed .)
    IF              reduce using rule 42 (expression -> bracketed .)
    RETURN          reduce using rule 42 (expression -> bracketed .)
    PRINT           reduce using rule 42 (expression -> bracketed .)
    BREAK           reduce using rule 42 (expression -> bracketed .)
    CONTINUE        reduce using rule 42 (expression -> bracketed .)
    FOR             reduce using rule 42 (expression -> bracketed .)
    WHILE           reduce using rule 42 (expression -> bracketed .)
    ID              reduce using rule 42 (expression -> bracketed .)


state 38

    (43) expression -> matrix .

    +               reduce using rule 43 (expression -> matrix .)
    -               reduce using rule 43 (expression -> matrix .)
    *               reduce using rule 43 (expression -> matrix .)
    /               reduce using rule 43 (expression -> matrix .)
    DOTADD          reduce using rule 43 (expression -> matrix .)
    DOTSUB          reduce using rule 43 (expression -> matrix .)
    DOTMUL          reduce using rule 43 (expression -> matrix .)
    DOTDIV          reduce using rule 43 (expression -> matrix .)
    <               reduce using rule 43 (expression -> matrix .)
    >               reduce using rule 43 (expression -> matrix .)
    ELESS           reduce using rule 43 (expression -> matrix .)
    EGREATER        reduce using rule 43 (expression -> matrix .)
    EQUALS          reduce using rule 43 (expression -> matrix .)
    NEQUALS         reduce using rule 43 (expression -> matrix .)
    '               reduce using rule 43 (expression -> matrix .)
    ;               reduce using rule 43 (expression -> matrix .)
    ,               reduce using rule 43 (expression -> matrix .)
    )               reduce using rule 43 (expression -> matrix .)
    ]               reduce using rule 43 (expression -> matrix .)
    :               reduce using rule 43 (expression -> matrix .)
    {               reduce using rule 43 (expression -> matrix .)
    IF              reduce using rule 43 (expression -> matrix .)
    RETURN          reduce using rule 43 (expression -> matrix .)
    PRINT           reduce using rule 43 (expression -> matrix .)
    BREAK           reduce using rule 43 (expression -> matrix .)
    CONTINUE        reduce using rule 43 (expression -> matrix .)
    FOR             reduce using rule 43 (expression -> matrix .)
    WHILE           reduce using rule 43 (expression -> matrix .)
    ID              reduce using rule 43 (expression -> matrix .)


state 39

    (44) expression -> matrix_function .

    +               reduce using rule 44 (expression -> matrix_function .)
    -               reduce using rule 44 (expression -> matrix_function .)
    *               reduce using rule 44 (expression -> matrix_function .)
    /               reduce using rule 44 (expression -> matrix_function .)
    DOTADD          reduce using rule 44 (expression -> matrix_function .)
    DOTSUB          reduce using rule 44 (expression -> matrix_function .)
    DOTMUL          reduce using rule 44 (expression -> matrix_function .)
    DOTDIV          reduce using rule 44 (expression -> matrix_function .)
    <               reduce using rule 44 (expression -> matrix_function .)
    >               reduce using rule 44 (expression -> matrix_function .)
    ELESS           reduce using rule 44 (expression -> matrix_function .)
    EGREATER        reduce using rule 44 (expression -> matrix_function .)
    EQUALS          reduce using rule 44 (expression -> matrix_function .)
    NEQUALS         reduce using rule 44 (expression -> matrix_function .)
    '               reduce using rule 44 (expression -> matrix_function .)
    ;               reduce using rule 44 (expression -> matrix_function .)
    ,               reduce using rule 44 (expression -> matrix_function .)
    )               reduce using rule 44 (expression -> matrix_function .)
    ]               reduce using rule 44 (expression -> matrix_function .)
    :               reduce using rule 44 (expression -> matrix_function .)
    {               reduce using rule 44 (expression -> matrix_function .)
    IF              reduce using rule 44 (expression -> matrix_function .)
    RETURN          reduce using rule 44 (expression -> matrix_function .)
    PRINT           reduce using rule 44 (expression -> matrix_function .)
    BREAK           reduce using rule 44 (expression -> matrix_function .)
    CONTINUE        reduce using rule 44 (expression -> matrix_function .)
    FOR             reduce using rule 44 (expression -> matrix_function .)
    WHILE           reduce using rule 44 (expression -> matrix_function .)
    ID              reduce using rule 44 (expression -> matrix_function .)


state 40

    (45) expression -> binary_expr .

    +               reduce using rule 45 (expression -> binary_expr .)
    -               reduce using rule 45 (expression -> binary_expr .)
    *               reduce using rule 45 (expression -> binary_expr .)
    /               reduce using rule 45 (expression -> binary_expr .)
    DOTADD          reduce using rule 45 (expression -> binary_expr .)
    DOTSUB          reduce using rule 45 (expression -> binary_expr .)
    DOTMUL          reduce using rule 45 (expression -> binary_expr .)
    DOTDIV          reduce using rule 45 (expression -> binary_expr .)
    <               reduce using rule 45 (expression -> binary_expr .)
    >               reduce using rule 45 (expression -> binary_expr .)
    ELESS           reduce using rule 45 (expression -> binary_expr .)
    EGREATER        reduce using rule 45 (expression -> binary_expr .)
    EQUALS          reduce using rule 45 (expression -> binary_expr .)
    NEQUALS         reduce using rule 45 (expression -> binary_expr .)
    '               reduce using rule 45 (expression -> binary_expr .)
    ;               reduce using rule 45 (expression -> binary_expr .)
    ,               reduce using rule 45 (expression -> binary_expr .)
    )               reduce using rule 45 (expression -> binary_expr .)
    ]               reduce using rule 45 (expression -> binary_expr .)
    :               reduce using rule 45 (expression -> binary_expr .)
    {               reduce using rule 45 (expression -> binary_expr .)
    IF              reduce using rule 45 (expression -> binary_expr .)
    RETURN          reduce using rule 45 (expression -> binary_expr .)
    PRINT           reduce using rule 45 (expression -> binary_expr .)
    BREAK           reduce using rule 45 (expression -> binary_expr .)
    CONTINUE        reduce using rule 45 (expression -> binary_expr .)
    FOR             reduce using rule 45 (expression -> binary_expr .)
    WHILE           reduce using rule 45 (expression -> binary_expr .)
    ID              reduce using rule 45 (expression -> binary_expr .)


state 41

    (46) expression -> uminus .

    +               reduce using rule 46 (expression -> uminus .)
    -               reduce using rule 46 (expression -> uminus .)
    *               reduce using rule 46 (expression -> uminus .)
    /               reduce using rule 46 (expression -> uminus .)
    DOTADD          reduce using rule 46 (expression -> uminus .)
    DOTSUB          reduce using rule 46 (expression -> uminus .)
    DOTMUL          reduce using rule 46 (expression -> uminus .)
    DOTDIV          reduce using rule 46 (expression -> uminus .)
    <               reduce using rule 46 (expression -> uminus .)
    >               reduce using rule 46 (expression -> uminus .)
    ELESS           reduce using rule 46 (expression -> uminus .)
    EGREATER        reduce using rule 46 (expression -> uminus .)
    EQUALS          reduce using rule 46 (expression -> uminus .)
    NEQUALS         reduce using rule 46 (expression -> uminus .)
    '               reduce using rule 46 (expression -> uminus .)
    ;               reduce using rule 46 (expression -> uminus .)
    ,               reduce using rule 46 (expression -> uminus .)
    )               reduce using rule 46 (expression -> uminus .)
    ]               reduce using rule 46 (expression -> uminus .)
    :               reduce using rule 46 (expression -> uminus .)
    {               reduce using rule 46 (expression -> uminus .)
    IF              reduce using rule 46 (expression -> uminus .)
    RETURN          reduce using rule 46 (expression -> uminus .)
    PRINT           reduce using rule 46 (expression -> uminus .)
    BREAK           reduce using rule 46 (expression -> uminus .)
    CONTINUE        reduce using rule 46 (expression -> uminus .)
    FOR             reduce using rule 46 (expression -> uminus .)
    WHILE           reduce using rule 46 (expression -> uminus .)
    ID              reduce using rule 46 (expression -> uminus .)


state 42

    (47) expression -> transposition .

    +               reduce using rule 47 (expression -> transposition .)
    -               reduce using rule 47 (expression -> transposition .)
    *               reduce using rule 47 (expression -> transposition .)
    /               reduce using rule 47 (expression -> transposition .)
    DOTADD          reduce using rule 47 (expression -> transposition .)
    DOTSUB          reduce using rule 47 (expression -> transposition .)
    DOTMUL          reduce using rule 47 (expression -> transposition .)
    DOTDIV          reduce using rule 47 (expression -> transposition .)
    <               reduce using rule 47 (expression -> transposition .)
    >               reduce using rule 47 (expression -> transposition .)
    ELESS           reduce using rule 47 (expression -> transposition .)
    EGREATER        reduce using rule 47 (expression -> transposition .)
    EQUALS          reduce using rule 47 (expression -> transposition .)
    NEQUALS         reduce using rule 47 (expression -> transposition .)
    '               reduce using rule 47 (expression -> transposition .)
    ;               reduce using rule 47 (expression -> transposition .)
    ,               reduce using rule 47 (expression -> transposition .)
    )               reduce using rule 47 (expression -> transposition .)
    ]               reduce using rule 47 (expression -> transposition .)
    :               reduce using rule 47 (expression -> transposition .)
    {               reduce using rule 47 (expression -> transposition .)
    IF              reduce using rule 47 (expression -> transposition .)
    RETURN          reduce using rule 47 (expression -> transposition .)
    PRINT           reduce using rule 47 (expression -> transposition .)
    BREAK           reduce using rule 47 (expression -> transposition .)
    CONTINUE        reduce using rule 47 (expression -> transposition .)
    FOR             reduce using rule 47 (expression -> transposition .)
    WHILE           reduce using rule 47 (expression -> transposition .)
    ID              reduce using rule 47 (expression -> transposition .)


state 43

    (49) int -> INTNUM .

    +               reduce using rule 49 (int -> INTNUM .)
    -               reduce using rule 49 (int -> INTNUM .)
    *               reduce using rule 49 (int -> INTNUM .)
    /               reduce using rule 49 (int -> INTNUM .)
    DOTADD          reduce using rule 49 (int -> INTNUM .)
    DOTSUB          reduce using rule 49 (int -> INTNUM .)
    DOTMUL          reduce using rule 49 (int -> INTNUM .)
    DOTDIV          reduce using rule 49 (int -> INTNUM .)
    <               reduce using rule 49 (int -> INTNUM .)
    >               reduce using rule 49 (int -> INTNUM .)
    ELESS           reduce using rule 49 (int -> INTNUM .)
    EGREATER        reduce using rule 49 (int -> INTNUM .)
    EQUALS          reduce using rule 49 (int -> INTNUM .)
    NEQUALS         reduce using rule 49 (int -> INTNUM .)
    '               reduce using rule 49 (int -> INTNUM .)
    ;               reduce using rule 49 (int -> INTNUM .)
    ,               reduce using rule 49 (int -> INTNUM .)
    )               reduce using rule 49 (int -> INTNUM .)
    ]               reduce using rule 49 (int -> INTNUM .)
    :               reduce using rule 49 (int -> INTNUM .)
    {               reduce using rule 49 (int -> INTNUM .)
    IF              reduce using rule 49 (int -> INTNUM .)
    RETURN          reduce using rule 49 (int -> INTNUM .)
    PRINT           reduce using rule 49 (int -> INTNUM .)
    BREAK           reduce using rule 49 (int -> INTNUM .)
    CONTINUE        reduce using rule 49 (int -> INTNUM .)
    FOR             reduce using rule 49 (int -> INTNUM .)
    WHILE           reduce using rule 49 (int -> INTNUM .)
    ID              reduce using rule 49 (int -> INTNUM .)


state 44

    (50) float -> FLOATNUM .

    +               reduce using rule 50 (float -> FLOATNUM .)
    -               reduce using rule 50 (float -> FLOATNUM .)
    *               reduce using rule 50 (float -> FLOATNUM .)
    /               reduce using rule 50 (float -> FLOATNUM .)
    DOTADD          reduce using rule 50 (float -> FLOATNUM .)
    DOTSUB          reduce using rule 50 (float -> FLOATNUM .)
    DOTMUL          reduce using rule 50 (float -> FLOATNUM .)
    DOTDIV          reduce using rule 50 (float -> FLOATNUM .)
    <               reduce using rule 50 (float -> FLOATNUM .)
    >               reduce using rule 50 (float -> FLOATNUM .)
    ELESS           reduce using rule 50 (float -> FLOATNUM .)
    EGREATER        reduce using rule 50 (float -> FLOATNUM .)
    EQUALS          reduce using rule 50 (float -> FLOATNUM .)
    NEQUALS         reduce using rule 50 (float -> FLOATNUM .)
    '               reduce using rule 50 (float -> FLOATNUM .)
    ;               reduce using rule 50 (float -> FLOATNUM .)
    ,               reduce using rule 50 (float -> FLOATNUM .)
    )               reduce using rule 50 (float -> FLOATNUM .)
    ]               reduce using rule 50 (float -> FLOATNUM .)
    :               reduce using rule 50 (float -> FLOATNUM .)
    {               reduce using rule 50 (float -> FLOATNUM .)
    IF              reduce using rule 50 (float -> FLOATNUM .)
    RETURN          reduce using rule 50 (float -> FLOATNUM .)
    PRINT           reduce using rule 50 (float -> FLOATNUM .)
    BREAK           reduce using rule 50 (float -> FLOATNUM .)
    CONTINUE        reduce using rule 50 (float -> FLOATNUM .)
    FOR             reduce using rule 50 (float -> FLOATNUM .)
    WHILE           reduce using rule 50 (float -> FLOATNUM .)
    ID              reduce using rule 50 (float -> FLOATNUM .)


state 45

    (67) matrix -> [ . vector_1 ]
    (68) vector_1 -> . vector_1 , [ vector_2 ]
    (69) vector_1 -> . [ vector_2 ]

    [               shift and go to state 83

    vector_1                       shift and go to state 84

state 46

    (48) bracketed -> ( . expression )
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 85
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 47

    (72) matrix_function -> function_name . ( expression )

    (               shift and go to state 86


state 48

    (65) uminus -> - . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 87
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 49

    (73) function_name -> EYE .

    (               reduce using rule 73 (function_name -> EYE .)


state 50

    (74) function_name -> ZEROS .

    (               reduce using rule 74 (function_name -> ZEROS .)


state 51

    (75) function_name -> ONES .

    (               reduce using rule 75 (function_name -> ONES .)


state 52

    (24) assignment -> assignable assign_operator . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    assignable                     shift and go to state 36
    expression                     shift and go to state 88
    int                            shift and go to state 34
    float                          shift and go to state 35
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 53

    (25) assign_operator -> = .

    INTNUM          reduce using rule 25 (assign_operator -> = .)
    FLOATNUM        reduce using rule 25 (assign_operator -> = .)
    (               reduce using rule 25 (assign_operator -> = .)
    [               reduce using rule 25 (assign_operator -> = .)
    -               reduce using rule 25 (assign_operator -> = .)
    ID              reduce using rule 25 (assign_operator -> = .)
    EYE             reduce using rule 25 (assign_operator -> = .)
    ZEROS           reduce using rule 25 (assign_operator -> = .)
    ONES            reduce using rule 25 (assign_operator -> = .)


state 54

    (26) assign_operator -> ADDASSIGN .

    INTNUM          reduce using rule 26 (assign_operator -> ADDASSIGN .)
    FLOATNUM        reduce using rule 26 (assign_operator -> ADDASSIGN .)
    (               reduce using rule 26 (assign_operator -> ADDASSIGN .)
    [               reduce using rule 26 (assign_operator -> ADDASSIGN .)
    -               reduce using rule 26 (assign_operator -> ADDASSIGN .)
    ID              reduce using rule 26 (assign_operator -> ADDASSIGN .)
    EYE             reduce using rule 26 (assign_operator -> ADDASSIGN .)
    ZEROS           reduce using rule 26 (assign_operator -> ADDASSIGN .)
    ONES            reduce using rule 26 (assign_operator -> ADDASSIGN .)


state 55

    (27) assign_operator -> SUBASSIGN .

    INTNUM          reduce using rule 27 (assign_operator -> SUBASSIGN .)
    FLOATNUM        reduce using rule 27 (assign_operator -> SUBASSIGN .)
    (               reduce using rule 27 (assign_operator -> SUBASSIGN .)
    [               reduce using rule 27 (assign_operator -> SUBASSIGN .)
    -               reduce using rule 27 (assign_operator -> SUBASSIGN .)
    ID              reduce using rule 27 (assign_operator -> SUBASSIGN .)
    EYE             reduce using rule 27 (assign_operator -> SUBASSIGN .)
    ZEROS           reduce using rule 27 (assign_operator -> SUBASSIGN .)
    ONES            reduce using rule 27 (assign_operator -> SUBASSIGN .)


state 56

    (28) assign_operator -> MULASSIGN .

    INTNUM          reduce using rule 28 (assign_operator -> MULASSIGN .)
    FLOATNUM        reduce using rule 28 (assign_operator -> MULASSIGN .)
    (               reduce using rule 28 (assign_operator -> MULASSIGN .)
    [               reduce using rule 28 (assign_operator -> MULASSIGN .)
    -               reduce using rule 28 (assign_operator -> MULASSIGN .)
    ID              reduce using rule 28 (assign_operator -> MULASSIGN .)
    EYE             reduce using rule 28 (assign_operator -> MULASSIGN .)
    ZEROS           reduce using rule 28 (assign_operator -> MULASSIGN .)
    ONES            reduce using rule 28 (assign_operator -> MULASSIGN .)


state 57

    (29) assign_operator -> DIVASSIGN .

    INTNUM          reduce using rule 29 (assign_operator -> DIVASSIGN .)
    FLOATNUM        reduce using rule 29 (assign_operator -> DIVASSIGN .)
    (               reduce using rule 29 (assign_operator -> DIVASSIGN .)
    [               reduce using rule 29 (assign_operator -> DIVASSIGN .)
    -               reduce using rule 29 (assign_operator -> DIVASSIGN .)
    ID              reduce using rule 29 (assign_operator -> DIVASSIGN .)
    EYE             reduce using rule 29 (assign_operator -> DIVASSIGN .)
    ZEROS           reduce using rule 29 (assign_operator -> DIVASSIGN .)
    ONES            reduce using rule 29 (assign_operator -> DIVASSIGN .)


state 58

    (33) print -> PRINT printable_list .
    (34) printable_list -> printable_list . , printable

    ;               reduce using rule 33 (print -> PRINT printable_list .)
    ,               shift and go to state 89


state 59

    (35) printable_list -> printable .

    ,               reduce using rule 35 (printable_list -> printable .)
    ;               reduce using rule 35 (printable_list -> printable .)


state 60

    (36) printable -> string .

    ,               reduce using rule 36 (printable -> string .)
    ;               reduce using rule 36 (printable -> string .)


state 61

    (37) printable -> expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    ,               reduce using rule 37 (printable -> expression .)
    ;               reduce using rule 37 (printable -> expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 62

    (38) string -> STRING .

    ,               reduce using rule 38 (string -> STRING .)
    ;               reduce using rule 38 (string -> STRING .)


state 63

    (20) for -> FOR ID . = expression : expression instruction

    =               shift and go to state 90


state 64

    (21) while -> WHILE ( . expression ) instruction
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 91
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 65

    (31) assignable -> id [ . expression , expression ]
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    id                             shift and go to state 24
    expression                     shift and go to state 92
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    function_name                  shift and go to state 47

state 66

    (6) instruction -> { instructions } .

    {               reduce using rule 6 (instruction -> { instructions } .)
    IF              reduce using rule 6 (instruction -> { instructions } .)
    RETURN          reduce using rule 6 (instruction -> { instructions } .)
    PRINT           reduce using rule 6 (instruction -> { instructions } .)
    BREAK           reduce using rule 6 (instruction -> { instructions } .)
    CONTINUE        reduce using rule 6 (instruction -> { instructions } .)
    FOR             reduce using rule 6 (instruction -> { instructions } .)
    WHILE           reduce using rule 6 (instruction -> { instructions } .)
    ID              reduce using rule 6 (instruction -> { instructions } .)
    $end            reduce using rule 6 (instruction -> { instructions } .)
    }               reduce using rule 6 (instruction -> { instructions } .)
    ELSE            reduce using rule 6 (instruction -> { instructions } .)


state 67

    (16) if -> IF ( expression . ) instruction
    (17) if -> IF ( expression . ) instruction ELSE instruction
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    )               shift and go to state 93
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 68

    (51) binary_expr -> expression + . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 94
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 69

    (52) binary_expr -> expression - . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 95
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 70

    (53) binary_expr -> expression * . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 96
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 71

    (54) binary_expr -> expression / . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 97
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 72

    (55) binary_expr -> expression DOTADD . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 98
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 73

    (56) binary_expr -> expression DOTSUB . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 99
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 74

    (57) binary_expr -> expression DOTMUL . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 100
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 75

    (58) binary_expr -> expression DOTDIV . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 101
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 76

    (59) binary_expr -> expression < . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 102
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 77

    (60) binary_expr -> expression > . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 103
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 78

    (61) binary_expr -> expression ELESS . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 104
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 79

    (62) binary_expr -> expression EGREATER . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 105
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 80

    (63) binary_expr -> expression EQUALS . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 106
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 81

    (64) binary_expr -> expression NEQUALS . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 107
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 82

    (66) transposition -> expression ' .

    +               reduce using rule 66 (transposition -> expression ' .)
    -               reduce using rule 66 (transposition -> expression ' .)
    *               reduce using rule 66 (transposition -> expression ' .)
    /               reduce using rule 66 (transposition -> expression ' .)
    DOTADD          reduce using rule 66 (transposition -> expression ' .)
    DOTSUB          reduce using rule 66 (transposition -> expression ' .)
    DOTMUL          reduce using rule 66 (transposition -> expression ' .)
    DOTDIV          reduce using rule 66 (transposition -> expression ' .)
    <               reduce using rule 66 (transposition -> expression ' .)
    >               reduce using rule 66 (transposition -> expression ' .)
    ELESS           reduce using rule 66 (transposition -> expression ' .)
    EGREATER        reduce using rule 66 (transposition -> expression ' .)
    EQUALS          reduce using rule 66 (transposition -> expression ' .)
    NEQUALS         reduce using rule 66 (transposition -> expression ' .)
    '               reduce using rule 66 (transposition -> expression ' .)
    ;               reduce using rule 66 (transposition -> expression ' .)
    ,               reduce using rule 66 (transposition -> expression ' .)
    )               reduce using rule 66 (transposition -> expression ' .)
    ]               reduce using rule 66 (transposition -> expression ' .)
    :               reduce using rule 66 (transposition -> expression ' .)
    {               reduce using rule 66 (transposition -> expression ' .)
    IF              reduce using rule 66 (transposition -> expression ' .)
    RETURN          reduce using rule 66 (transposition -> expression ' .)
    PRINT           reduce using rule 66 (transposition -> expression ' .)
    BREAK           reduce using rule 66 (transposition -> expression ' .)
    CONTINUE        reduce using rule 66 (transposition -> expression ' .)
    FOR             reduce using rule 66 (transposition -> expression ' .)
    WHILE           reduce using rule 66 (transposition -> expression ' .)
    ID              reduce using rule 66 (transposition -> expression ' .)


state 83

    (69) vector_1 -> [ . vector_2 ]
    (70) vector_2 -> . vector_2 , expression
    (71) vector_2 -> . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    vector_2                       shift and go to state 108
    expression                     shift and go to state 109
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 84

    (67) matrix -> [ vector_1 . ]
    (68) vector_1 -> vector_1 . , [ vector_2 ]

    ]               shift and go to state 110
    ,               shift and go to state 111


state 85

    (48) bracketed -> ( expression . )
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    )               shift and go to state 112
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 86

    (72) matrix_function -> function_name ( . expression )
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    function_name                  shift and go to state 47
    expression                     shift and go to state 113
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24

state 87

    (65) uminus -> - expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 65 (uminus -> - expression .)
    -               reduce using rule 65 (uminus -> - expression .)
    *               reduce using rule 65 (uminus -> - expression .)
    /               reduce using rule 65 (uminus -> - expression .)
    DOTADD          reduce using rule 65 (uminus -> - expression .)
    DOTSUB          reduce using rule 65 (uminus -> - expression .)
    DOTMUL          reduce using rule 65 (uminus -> - expression .)
    DOTDIV          reduce using rule 65 (uminus -> - expression .)
    <               reduce using rule 65 (uminus -> - expression .)
    >               reduce using rule 65 (uminus -> - expression .)
    ELESS           reduce using rule 65 (uminus -> - expression .)
    EGREATER        reduce using rule 65 (uminus -> - expression .)
    EQUALS          reduce using rule 65 (uminus -> - expression .)
    NEQUALS         reduce using rule 65 (uminus -> - expression .)
    '               reduce using rule 65 (uminus -> - expression .)
    ;               reduce using rule 65 (uminus -> - expression .)
    ,               reduce using rule 65 (uminus -> - expression .)
    )               reduce using rule 65 (uminus -> - expression .)
    ]               reduce using rule 65 (uminus -> - expression .)
    :               reduce using rule 65 (uminus -> - expression .)
    {               reduce using rule 65 (uminus -> - expression .)
    IF              reduce using rule 65 (uminus -> - expression .)
    RETURN          reduce using rule 65 (uminus -> - expression .)
    PRINT           reduce using rule 65 (uminus -> - expression .)
    BREAK           reduce using rule 65 (uminus -> - expression .)
    CONTINUE        reduce using rule 65 (uminus -> - expression .)
    FOR             reduce using rule 65 (uminus -> - expression .)
    WHILE           reduce using rule 65 (uminus -> - expression .)
    ID              reduce using rule 65 (uminus -> - expression .)

  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]
  ! '               [ shift and go to state 82 ]


state 88

    (24) assignment -> assignable assign_operator expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    ;               reduce using rule 24 (assignment -> assignable assign_operator expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 89

    (34) printable_list -> printable_list , . printable
    (36) printable -> . string
    (37) printable -> . expression
    (38) string -> . STRING
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    STRING          shift and go to state 62
    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    printable                      shift and go to state 114
    string                         shift and go to state 60
    expression                     shift and go to state 61
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 90

    (20) for -> FOR ID = . expression : expression instruction
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 115
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 91

    (21) while -> WHILE ( expression . ) instruction
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    )               shift and go to state 116
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 92

    (31) assignable -> id [ expression . , expression ]
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    ,               shift and go to state 117
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 93

    (16) if -> IF ( expression ) . instruction
    (17) if -> IF ( expression ) . instruction ELSE instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 118
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 94

    (51) binary_expr -> expression + expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 51 (binary_expr -> expression + expression .)
    -               reduce using rule 51 (binary_expr -> expression + expression .)
    <               reduce using rule 51 (binary_expr -> expression + expression .)
    >               reduce using rule 51 (binary_expr -> expression + expression .)
    ELESS           reduce using rule 51 (binary_expr -> expression + expression .)
    EGREATER        reduce using rule 51 (binary_expr -> expression + expression .)
    EQUALS          reduce using rule 51 (binary_expr -> expression + expression .)
    NEQUALS         reduce using rule 51 (binary_expr -> expression + expression .)
    ;               reduce using rule 51 (binary_expr -> expression + expression .)
    ,               reduce using rule 51 (binary_expr -> expression + expression .)
    )               reduce using rule 51 (binary_expr -> expression + expression .)
    ]               reduce using rule 51 (binary_expr -> expression + expression .)
    :               reduce using rule 51 (binary_expr -> expression + expression .)
    {               reduce using rule 51 (binary_expr -> expression + expression .)
    IF              reduce using rule 51 (binary_expr -> expression + expression .)
    RETURN          reduce using rule 51 (binary_expr -> expression + expression .)
    PRINT           reduce using rule 51 (binary_expr -> expression + expression .)
    BREAK           reduce using rule 51 (binary_expr -> expression + expression .)
    CONTINUE        reduce using rule 51 (binary_expr -> expression + expression .)
    FOR             reduce using rule 51 (binary_expr -> expression + expression .)
    WHILE           reduce using rule 51 (binary_expr -> expression + expression .)
    ID              reduce using rule 51 (binary_expr -> expression + expression .)
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! *               [ reduce using rule 51 (binary_expr -> expression + expression .) ]
  ! /               [ reduce using rule 51 (binary_expr -> expression + expression .) ]
  ! DOTADD          [ reduce using rule 51 (binary_expr -> expression + expression .) ]
  ! DOTSUB          [ reduce using rule 51 (binary_expr -> expression + expression .) ]
  ! DOTMUL          [ reduce using rule 51 (binary_expr -> expression + expression .) ]
  ! DOTDIV          [ reduce using rule 51 (binary_expr -> expression + expression .) ]
  ! '               [ reduce using rule 51 (binary_expr -> expression + expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 95

    (52) binary_expr -> expression - expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 52 (binary_expr -> expression - expression .)
    -               reduce using rule 52 (binary_expr -> expression - expression .)
    <               reduce using rule 52 (binary_expr -> expression - expression .)
    >               reduce using rule 52 (binary_expr -> expression - expression .)
    ELESS           reduce using rule 52 (binary_expr -> expression - expression .)
    EGREATER        reduce using rule 52 (binary_expr -> expression - expression .)
    EQUALS          reduce using rule 52 (binary_expr -> expression - expression .)
    NEQUALS         reduce using rule 52 (binary_expr -> expression - expression .)
    ;               reduce using rule 52 (binary_expr -> expression - expression .)
    ,               reduce using rule 52 (binary_expr -> expression - expression .)
    )               reduce using rule 52 (binary_expr -> expression - expression .)
    ]               reduce using rule 52 (binary_expr -> expression - expression .)
    :               reduce using rule 52 (binary_expr -> expression - expression .)
    {               reduce using rule 52 (binary_expr -> expression - expression .)
    IF              reduce using rule 52 (binary_expr -> expression - expression .)
    RETURN          reduce using rule 52 (binary_expr -> expression - expression .)
    PRINT           reduce using rule 52 (binary_expr -> expression - expression .)
    BREAK           reduce using rule 52 (binary_expr -> expression - expression .)
    CONTINUE        reduce using rule 52 (binary_expr -> expression - expression .)
    FOR             reduce using rule 52 (binary_expr -> expression - expression .)
    WHILE           reduce using rule 52 (binary_expr -> expression - expression .)
    ID              reduce using rule 52 (binary_expr -> expression - expression .)
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! *               [ reduce using rule 52 (binary_expr -> expression - expression .) ]
  ! /               [ reduce using rule 52 (binary_expr -> expression - expression .) ]
  ! DOTADD          [ reduce using rule 52 (binary_expr -> expression - expression .) ]
  ! DOTSUB          [ reduce using rule 52 (binary_expr -> expression - expression .) ]
  ! DOTMUL          [ reduce using rule 52 (binary_expr -> expression - expression .) ]
  ! DOTDIV          [ reduce using rule 52 (binary_expr -> expression - expression .) ]
  ! '               [ reduce using rule 52 (binary_expr -> expression - expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 96

    (53) binary_expr -> expression * expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 53 (binary_expr -> expression * expression .)
    -               reduce using rule 53 (binary_expr -> expression * expression .)
    *               reduce using rule 53 (binary_expr -> expression * expression .)
    /               reduce using rule 53 (binary_expr -> expression * expression .)
    <               reduce using rule 53 (binary_expr -> expression * expression .)
    >               reduce using rule 53 (binary_expr -> expression * expression .)
    ELESS           reduce using rule 53 (binary_expr -> expression * expression .)
    EGREATER        reduce using rule 53 (binary_expr -> expression * expression .)
    EQUALS          reduce using rule 53 (binary_expr -> expression * expression .)
    NEQUALS         reduce using rule 53 (binary_expr -> expression * expression .)
    ;               reduce using rule 53 (binary_expr -> expression * expression .)
    ,               reduce using rule 53 (binary_expr -> expression * expression .)
    )               reduce using rule 53 (binary_expr -> expression * expression .)
    ]               reduce using rule 53 (binary_expr -> expression * expression .)
    :               reduce using rule 53 (binary_expr -> expression * expression .)
    {               reduce using rule 53 (binary_expr -> expression * expression .)
    IF              reduce using rule 53 (binary_expr -> expression * expression .)
    RETURN          reduce using rule 53 (binary_expr -> expression * expression .)
    PRINT           reduce using rule 53 (binary_expr -> expression * expression .)
    BREAK           reduce using rule 53 (binary_expr -> expression * expression .)
    CONTINUE        reduce using rule 53 (binary_expr -> expression * expression .)
    FOR             reduce using rule 53 (binary_expr -> expression * expression .)
    WHILE           reduce using rule 53 (binary_expr -> expression * expression .)
    ID              reduce using rule 53 (binary_expr -> expression * expression .)
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! DOTADD          [ reduce using rule 53 (binary_expr -> expression * expression .) ]
  ! DOTSUB          [ reduce using rule 53 (binary_expr -> expression * expression .) ]
  ! DOTMUL          [ reduce using rule 53 (binary_expr -> expression * expression .) ]
  ! DOTDIV          [ reduce using rule 53 (binary_expr -> expression * expression .) ]
  ! '               [ reduce using rule 53 (binary_expr -> expression * expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 97

    (54) binary_expr -> expression / expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 54 (binary_expr -> expression / expression .)
    -               reduce using rule 54 (binary_expr -> expression / expression .)
    *               reduce using rule 54 (binary_expr -> expression / expression .)
    /               reduce using rule 54 (binary_expr -> expression / expression .)
    <               reduce using rule 54 (binary_expr -> expression / expression .)
    >               reduce using rule 54 (binary_expr -> expression / expression .)
    ELESS           reduce using rule 54 (binary_expr -> expression / expression .)
    EGREATER        reduce using rule 54 (binary_expr -> expression / expression .)
    EQUALS          reduce using rule 54 (binary_expr -> expression / expression .)
    NEQUALS         reduce using rule 54 (binary_expr -> expression / expression .)
    ;               reduce using rule 54 (binary_expr -> expression / expression .)
    ,               reduce using rule 54 (binary_expr -> expression / expression .)
    )               reduce using rule 54 (binary_expr -> expression / expression .)
    ]               reduce using rule 54 (binary_expr -> expression / expression .)
    :               reduce using rule 54 (binary_expr -> expression / expression .)
    {               reduce using rule 54 (binary_expr -> expression / expression .)
    IF              reduce using rule 54 (binary_expr -> expression / expression .)
    RETURN          reduce using rule 54 (binary_expr -> expression / expression .)
    PRINT           reduce using rule 54 (binary_expr -> expression / expression .)
    BREAK           reduce using rule 54 (binary_expr -> expression / expression .)
    CONTINUE        reduce using rule 54 (binary_expr -> expression / expression .)
    FOR             reduce using rule 54 (binary_expr -> expression / expression .)
    WHILE           reduce using rule 54 (binary_expr -> expression / expression .)
    ID              reduce using rule 54 (binary_expr -> expression / expression .)
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! DOTADD          [ reduce using rule 54 (binary_expr -> expression / expression .) ]
  ! DOTSUB          [ reduce using rule 54 (binary_expr -> expression / expression .) ]
  ! DOTMUL          [ reduce using rule 54 (binary_expr -> expression / expression .) ]
  ! DOTDIV          [ reduce using rule 54 (binary_expr -> expression / expression .) ]
  ! '               [ reduce using rule 54 (binary_expr -> expression / expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 98

    (55) binary_expr -> expression DOTADD expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    -               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    *               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    /               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    DOTADD          reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    DOTSUB          reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    <               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    >               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    ELESS           reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    EGREATER        reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    EQUALS          reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    NEQUALS         reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    ;               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    ,               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    )               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    ]               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    :               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    {               reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    IF              reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    RETURN          reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    PRINT           reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    BREAK           reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    CONTINUE        reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    FOR             reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    WHILE           reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    ID              reduce using rule 55 (binary_expr -> expression DOTADD expression .)
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! DOTMUL          [ reduce using rule 55 (binary_expr -> expression DOTADD expression .) ]
  ! DOTDIV          [ reduce using rule 55 (binary_expr -> expression DOTADD expression .) ]
  ! '               [ reduce using rule 55 (binary_expr -> expression DOTADD expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 99

    (56) binary_expr -> expression DOTSUB expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    -               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    *               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    /               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    DOTADD          reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    DOTSUB          reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    <               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    >               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    ELESS           reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    EGREATER        reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    EQUALS          reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    NEQUALS         reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    ;               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    ,               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    )               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    ]               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    :               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    {               reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    IF              reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    RETURN          reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    PRINT           reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    BREAK           reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    CONTINUE        reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    FOR             reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    WHILE           reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    ID              reduce using rule 56 (binary_expr -> expression DOTSUB expression .)
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! DOTMUL          [ reduce using rule 56 (binary_expr -> expression DOTSUB expression .) ]
  ! DOTDIV          [ reduce using rule 56 (binary_expr -> expression DOTSUB expression .) ]
  ! '               [ reduce using rule 56 (binary_expr -> expression DOTSUB expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 100

    (57) binary_expr -> expression DOTMUL expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    -               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    *               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    /               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    DOTADD          reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    DOTSUB          reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    DOTMUL          reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    DOTDIV          reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    <               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    >               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    ELESS           reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    EGREATER        reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    EQUALS          reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    NEQUALS         reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    ;               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    ,               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    )               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    ]               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    :               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    {               reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    IF              reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    RETURN          reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    PRINT           reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    BREAK           reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    CONTINUE        reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    FOR             reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    WHILE           reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    ID              reduce using rule 57 (binary_expr -> expression DOTMUL expression .)
    '               shift and go to state 82

  ! '               [ reduce using rule 57 (binary_expr -> expression DOTMUL expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 101

    (58) binary_expr -> expression DOTDIV expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    +               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    -               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    *               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    /               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    DOTADD          reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    DOTSUB          reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    DOTMUL          reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    DOTDIV          reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    <               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    >               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    ELESS           reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    EGREATER        reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    EQUALS          reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    NEQUALS         reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    ;               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    ,               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    )               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    ]               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    :               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    {               reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    IF              reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    RETURN          reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    PRINT           reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    BREAK           reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    CONTINUE        reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    FOR             reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    WHILE           reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    ID              reduce using rule 58 (binary_expr -> expression DOTDIV expression .)
    '               shift and go to state 82

  ! '               [ reduce using rule 58 (binary_expr -> expression DOTDIV expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 69 ]
  ! *               [ shift and go to state 70 ]
  ! /               [ shift and go to state 71 ]
  ! DOTADD          [ shift and go to state 72 ]
  ! DOTSUB          [ shift and go to state 73 ]
  ! DOTMUL          [ shift and go to state 74 ]
  ! DOTDIV          [ shift and go to state 75 ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 102

    (59) binary_expr -> expression < expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    <               reduce using rule 59 (binary_expr -> expression < expression .)
    >               reduce using rule 59 (binary_expr -> expression < expression .)
    ELESS           reduce using rule 59 (binary_expr -> expression < expression .)
    EGREATER        reduce using rule 59 (binary_expr -> expression < expression .)
    EQUALS          reduce using rule 59 (binary_expr -> expression < expression .)
    NEQUALS         reduce using rule 59 (binary_expr -> expression < expression .)
    ;               reduce using rule 59 (binary_expr -> expression < expression .)
    ,               reduce using rule 59 (binary_expr -> expression < expression .)
    )               reduce using rule 59 (binary_expr -> expression < expression .)
    ]               reduce using rule 59 (binary_expr -> expression < expression .)
    :               reduce using rule 59 (binary_expr -> expression < expression .)
    {               reduce using rule 59 (binary_expr -> expression < expression .)
    IF              reduce using rule 59 (binary_expr -> expression < expression .)
    RETURN          reduce using rule 59 (binary_expr -> expression < expression .)
    PRINT           reduce using rule 59 (binary_expr -> expression < expression .)
    BREAK           reduce using rule 59 (binary_expr -> expression < expression .)
    CONTINUE        reduce using rule 59 (binary_expr -> expression < expression .)
    FOR             reduce using rule 59 (binary_expr -> expression < expression .)
    WHILE           reduce using rule 59 (binary_expr -> expression < expression .)
    ID              reduce using rule 59 (binary_expr -> expression < expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! +               [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! -               [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! *               [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! /               [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! DOTADD          [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! DOTSUB          [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! DOTMUL          [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! DOTDIV          [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! '               [ reduce using rule 59 (binary_expr -> expression < expression .) ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 103

    (60) binary_expr -> expression > expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    <               reduce using rule 60 (binary_expr -> expression > expression .)
    >               reduce using rule 60 (binary_expr -> expression > expression .)
    ELESS           reduce using rule 60 (binary_expr -> expression > expression .)
    EGREATER        reduce using rule 60 (binary_expr -> expression > expression .)
    EQUALS          reduce using rule 60 (binary_expr -> expression > expression .)
    NEQUALS         reduce using rule 60 (binary_expr -> expression > expression .)
    ;               reduce using rule 60 (binary_expr -> expression > expression .)
    ,               reduce using rule 60 (binary_expr -> expression > expression .)
    )               reduce using rule 60 (binary_expr -> expression > expression .)
    ]               reduce using rule 60 (binary_expr -> expression > expression .)
    :               reduce using rule 60 (binary_expr -> expression > expression .)
    {               reduce using rule 60 (binary_expr -> expression > expression .)
    IF              reduce using rule 60 (binary_expr -> expression > expression .)
    RETURN          reduce using rule 60 (binary_expr -> expression > expression .)
    PRINT           reduce using rule 60 (binary_expr -> expression > expression .)
    BREAK           reduce using rule 60 (binary_expr -> expression > expression .)
    CONTINUE        reduce using rule 60 (binary_expr -> expression > expression .)
    FOR             reduce using rule 60 (binary_expr -> expression > expression .)
    WHILE           reduce using rule 60 (binary_expr -> expression > expression .)
    ID              reduce using rule 60 (binary_expr -> expression > expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! +               [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! -               [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! *               [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! /               [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! DOTADD          [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! DOTSUB          [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! DOTMUL          [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! DOTDIV          [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! '               [ reduce using rule 60 (binary_expr -> expression > expression .) ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 104

    (61) binary_expr -> expression ELESS expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    <               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    >               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    ELESS           reduce using rule 61 (binary_expr -> expression ELESS expression .)
    EGREATER        reduce using rule 61 (binary_expr -> expression ELESS expression .)
    EQUALS          reduce using rule 61 (binary_expr -> expression ELESS expression .)
    NEQUALS         reduce using rule 61 (binary_expr -> expression ELESS expression .)
    ;               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    ,               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    )               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    ]               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    :               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    {               reduce using rule 61 (binary_expr -> expression ELESS expression .)
    IF              reduce using rule 61 (binary_expr -> expression ELESS expression .)
    RETURN          reduce using rule 61 (binary_expr -> expression ELESS expression .)
    PRINT           reduce using rule 61 (binary_expr -> expression ELESS expression .)
    BREAK           reduce using rule 61 (binary_expr -> expression ELESS expression .)
    CONTINUE        reduce using rule 61 (binary_expr -> expression ELESS expression .)
    FOR             reduce using rule 61 (binary_expr -> expression ELESS expression .)
    WHILE           reduce using rule 61 (binary_expr -> expression ELESS expression .)
    ID              reduce using rule 61 (binary_expr -> expression ELESS expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! +               [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! -               [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! *               [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! /               [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! DOTADD          [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! DOTSUB          [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! DOTMUL          [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! DOTDIV          [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! '               [ reduce using rule 61 (binary_expr -> expression ELESS expression .) ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 105

    (62) binary_expr -> expression EGREATER expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    <               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    >               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    ELESS           reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    EGREATER        reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    EQUALS          reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    NEQUALS         reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    ;               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    ,               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    )               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    ]               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    :               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    {               reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    IF              reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    RETURN          reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    PRINT           reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    BREAK           reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    CONTINUE        reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    FOR             reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    WHILE           reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    ID              reduce using rule 62 (binary_expr -> expression EGREATER expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! +               [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! -               [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! *               [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! /               [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! DOTADD          [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! DOTSUB          [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! DOTMUL          [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! DOTDIV          [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! '               [ reduce using rule 62 (binary_expr -> expression EGREATER expression .) ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 106

    (63) binary_expr -> expression EQUALS expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    <               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    >               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    ELESS           reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    EGREATER        reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    EQUALS          reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    NEQUALS         reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    ;               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    ,               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    )               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    ]               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    :               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    {               reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    IF              reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    RETURN          reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    PRINT           reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    BREAK           reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    CONTINUE        reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    FOR             reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    WHILE           reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    ID              reduce using rule 63 (binary_expr -> expression EQUALS expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! +               [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! -               [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! *               [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! /               [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! DOTADD          [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! DOTSUB          [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! DOTMUL          [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! DOTDIV          [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! '               [ reduce using rule 63 (binary_expr -> expression EQUALS expression .) ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 107

    (64) binary_expr -> expression NEQUALS expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    <               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    >               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    ELESS           reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    EGREATER        reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    EQUALS          reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    NEQUALS         reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    ;               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    ,               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    )               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    ]               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    :               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    {               reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    IF              reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    RETURN          reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    PRINT           reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    BREAK           reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    CONTINUE        reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    FOR             reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    WHILE           reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    ID              reduce using rule 64 (binary_expr -> expression NEQUALS expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    '               shift and go to state 82

  ! +               [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! -               [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! *               [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! /               [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTADD          [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTSUB          [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTMUL          [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! DOTDIV          [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! '               [ reduce using rule 64 (binary_expr -> expression NEQUALS expression .) ]
  ! <               [ shift and go to state 76 ]
  ! >               [ shift and go to state 77 ]
  ! ELESS           [ shift and go to state 78 ]
  ! EGREATER        [ shift and go to state 79 ]
  ! EQUALS          [ shift and go to state 80 ]
  ! NEQUALS         [ shift and go to state 81 ]


state 108

    (69) vector_1 -> [ vector_2 . ]
    (70) vector_2 -> vector_2 . , expression

    ]               shift and go to state 119
    ,               shift and go to state 120


state 109

    (71) vector_2 -> expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    ]               reduce using rule 71 (vector_2 -> expression .)
    ,               reduce using rule 71 (vector_2 -> expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 110

    (67) matrix -> [ vector_1 ] .

    +               reduce using rule 67 (matrix -> [ vector_1 ] .)
    -               reduce using rule 67 (matrix -> [ vector_1 ] .)
    *               reduce using rule 67 (matrix -> [ vector_1 ] .)
    /               reduce using rule 67 (matrix -> [ vector_1 ] .)
    DOTADD          reduce using rule 67 (matrix -> [ vector_1 ] .)
    DOTSUB          reduce using rule 67 (matrix -> [ vector_1 ] .)
    DOTMUL          reduce using rule 67 (matrix -> [ vector_1 ] .)
    DOTDIV          reduce using rule 67 (matrix -> [ vector_1 ] .)
    <               reduce using rule 67 (matrix -> [ vector_1 ] .)
    >               reduce using rule 67 (matrix -> [ vector_1 ] .)
    ELESS           reduce using rule 67 (matrix -> [ vector_1 ] .)
    EGREATER        reduce using rule 67 (matrix -> [ vector_1 ] .)
    EQUALS          reduce using rule 67 (matrix -> [ vector_1 ] .)
    NEQUALS         reduce using rule 67 (matrix -> [ vector_1 ] .)
    '               reduce using rule 67 (matrix -> [ vector_1 ] .)
    ;               reduce using rule 67 (matrix -> [ vector_1 ] .)
    ,               reduce using rule 67 (matrix -> [ vector_1 ] .)
    )               reduce using rule 67 (matrix -> [ vector_1 ] .)
    ]               reduce using rule 67 (matrix -> [ vector_1 ] .)
    :               reduce using rule 67 (matrix -> [ vector_1 ] .)
    {               reduce using rule 67 (matrix -> [ vector_1 ] .)
    IF              reduce using rule 67 (matrix -> [ vector_1 ] .)
    RETURN          reduce using rule 67 (matrix -> [ vector_1 ] .)
    PRINT           reduce using rule 67 (matrix -> [ vector_1 ] .)
    BREAK           reduce using rule 67 (matrix -> [ vector_1 ] .)
    CONTINUE        reduce using rule 67 (matrix -> [ vector_1 ] .)
    FOR             reduce using rule 67 (matrix -> [ vector_1 ] .)
    WHILE           reduce using rule 67 (matrix -> [ vector_1 ] .)
    ID              reduce using rule 67 (matrix -> [ vector_1 ] .)


state 111

    (68) vector_1 -> vector_1 , . [ vector_2 ]

    [               shift and go to state 121


state 112

    (48) bracketed -> ( expression ) .

    +               reduce using rule 48 (bracketed -> ( expression ) .)
    -               reduce using rule 48 (bracketed -> ( expression ) .)
    *               reduce using rule 48 (bracketed -> ( expression ) .)
    /               reduce using rule 48 (bracketed -> ( expression ) .)
    DOTADD          reduce using rule 48 (bracketed -> ( expression ) .)
    DOTSUB          reduce using rule 48 (bracketed -> ( expression ) .)
    DOTMUL          reduce using rule 48 (bracketed -> ( expression ) .)
    DOTDIV          reduce using rule 48 (bracketed -> ( expression ) .)
    <               reduce using rule 48 (bracketed -> ( expression ) .)
    >               reduce using rule 48 (bracketed -> ( expression ) .)
    ELESS           reduce using rule 48 (bracketed -> ( expression ) .)
    EGREATER        reduce using rule 48 (bracketed -> ( expression ) .)
    EQUALS          reduce using rule 48 (bracketed -> ( expression ) .)
    NEQUALS         reduce using rule 48 (bracketed -> ( expression ) .)
    '               reduce using rule 48 (bracketed -> ( expression ) .)
    ;               reduce using rule 48 (bracketed -> ( expression ) .)
    ,               reduce using rule 48 (bracketed -> ( expression ) .)
    )               reduce using rule 48 (bracketed -> ( expression ) .)
    ]               reduce using rule 48 (bracketed -> ( expression ) .)
    :               reduce using rule 48 (bracketed -> ( expression ) .)
    {               reduce using rule 48 (bracketed -> ( expression ) .)
    IF              reduce using rule 48 (bracketed -> ( expression ) .)
    RETURN          reduce using rule 48 (bracketed -> ( expression ) .)
    PRINT           reduce using rule 48 (bracketed -> ( expression ) .)
    BREAK           reduce using rule 48 (bracketed -> ( expression ) .)
    CONTINUE        reduce using rule 48 (bracketed -> ( expression ) .)
    FOR             reduce using rule 48 (bracketed -> ( expression ) .)
    WHILE           reduce using rule 48 (bracketed -> ( expression ) .)
    ID              reduce using rule 48 (bracketed -> ( expression ) .)


state 113

    (72) matrix_function -> function_name ( expression . )
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    )               shift and go to state 122
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 114

    (34) printable_list -> printable_list , printable .

    ,               reduce using rule 34 (printable_list -> printable_list , printable .)
    ;               reduce using rule 34 (printable_list -> printable_list , printable .)


state 115

    (20) for -> FOR ID = expression . : expression instruction
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    :               shift and go to state 123
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 116

    (21) while -> WHILE ( expression ) . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 124
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 117

    (31) assignable -> id [ expression , . expression ]
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    id                             shift and go to state 24
    expression                     shift and go to state 125
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    function_name                  shift and go to state 47

state 118

    (16) if -> IF ( expression ) instruction .
    (17) if -> IF ( expression ) instruction . ELSE instruction

    {               reduce using rule 16 (if -> IF ( expression ) instruction .)
    IF              reduce using rule 16 (if -> IF ( expression ) instruction .)
    RETURN          reduce using rule 16 (if -> IF ( expression ) instruction .)
    PRINT           reduce using rule 16 (if -> IF ( expression ) instruction .)
    BREAK           reduce using rule 16 (if -> IF ( expression ) instruction .)
    CONTINUE        reduce using rule 16 (if -> IF ( expression ) instruction .)
    FOR             reduce using rule 16 (if -> IF ( expression ) instruction .)
    WHILE           reduce using rule 16 (if -> IF ( expression ) instruction .)
    ID              reduce using rule 16 (if -> IF ( expression ) instruction .)
    $end            reduce using rule 16 (if -> IF ( expression ) instruction .)
    }               reduce using rule 16 (if -> IF ( expression ) instruction .)
    ELSE            shift and go to state 126

  ! ELSE            [ reduce using rule 16 (if -> IF ( expression ) instruction .) ]


state 119

    (69) vector_1 -> [ vector_2 ] .

    ]               reduce using rule 69 (vector_1 -> [ vector_2 ] .)
    ,               reduce using rule 69 (vector_1 -> [ vector_2 ] .)


state 120

    (70) vector_2 -> vector_2 , . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 127
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 121

    (68) vector_1 -> vector_1 , [ . vector_2 ]
    (70) vector_2 -> . vector_2 , expression
    (71) vector_2 -> . expression
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    vector_2                       shift and go to state 128
    expression                     shift and go to state 109
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 122

    (72) matrix_function -> function_name ( expression ) .

    +               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    -               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    *               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    /               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    DOTADD          reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    DOTSUB          reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    DOTMUL          reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    DOTDIV          reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    <               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    >               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    ELESS           reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    EGREATER        reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    EQUALS          reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    NEQUALS         reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    '               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    ;               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    ,               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    )               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    ]               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    :               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    {               reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    IF              reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    RETURN          reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    PRINT           reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    BREAK           reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    CONTINUE        reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    FOR             reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    WHILE           reduce using rule 72 (matrix_function -> function_name ( expression ) .)
    ID              reduce using rule 72 (matrix_function -> function_name ( expression ) .)


state 123

    (20) for -> FOR ID = expression : . expression instruction
    (39) expression -> . int
    (40) expression -> . float
    (41) expression -> . assignable
    (42) expression -> . bracketed
    (43) expression -> . matrix
    (44) expression -> . matrix_function
    (45) expression -> . binary_expr
    (46) expression -> . uminus
    (47) expression -> . transposition
    (49) int -> . INTNUM
    (50) float -> . FLOATNUM
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (48) bracketed -> . ( expression )
    (67) matrix -> . [ vector_1 ]
    (72) matrix_function -> . function_name ( expression )
    (51) binary_expr -> . expression + expression
    (52) binary_expr -> . expression - expression
    (53) binary_expr -> . expression * expression
    (54) binary_expr -> . expression / expression
    (55) binary_expr -> . expression DOTADD expression
    (56) binary_expr -> . expression DOTSUB expression
    (57) binary_expr -> . expression DOTMUL expression
    (58) binary_expr -> . expression DOTDIV expression
    (59) binary_expr -> . expression < expression
    (60) binary_expr -> . expression > expression
    (61) binary_expr -> . expression ELESS expression
    (62) binary_expr -> . expression EGREATER expression
    (63) binary_expr -> . expression EQUALS expression
    (64) binary_expr -> . expression NEQUALS expression
    (65) uminus -> . - expression
    (66) transposition -> . expression '
    (32) id -> . ID
    (73) function_name -> . EYE
    (74) function_name -> . ZEROS
    (75) function_name -> . ONES

    INTNUM          shift and go to state 43
    FLOATNUM        shift and go to state 44
    (               shift and go to state 46
    [               shift and go to state 45
    -               shift and go to state 48
    ID              shift and go to state 22
    EYE             shift and go to state 49
    ZEROS           shift and go to state 50
    ONES            shift and go to state 51

    expression                     shift and go to state 129
    int                            shift and go to state 34
    float                          shift and go to state 35
    assignable                     shift and go to state 36
    bracketed                      shift and go to state 37
    matrix                         shift and go to state 38
    matrix_function                shift and go to state 39
    binary_expr                    shift and go to state 40
    uminus                         shift and go to state 41
    transposition                  shift and go to state 42
    id                             shift and go to state 24
    function_name                  shift and go to state 47

state 124

    (21) while -> WHILE ( expression ) instruction .

    {               reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    IF              reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    RETURN          reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    PRINT           reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    BREAK           reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    CONTINUE        reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    FOR             reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    WHILE           reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    ID              reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    $end            reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    }               reduce using rule 21 (while -> WHILE ( expression ) instruction .)
    ELSE            reduce using rule 21 (while -> WHILE ( expression ) instruction .)


state 125

    (31) assignable -> id [ expression , expression . ]
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    ]               shift and go to state 130
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 126

    (17) if -> IF ( expression ) instruction ELSE . instruction
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 131
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 127

    (70) vector_2 -> vector_2 , expression .
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '

    ]               reduce using rule 70 (vector_2 -> vector_2 , expression .)
    ,               reduce using rule 70 (vector_2 -> vector_2 , expression .)
    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82


state 128

    (68) vector_1 -> vector_1 , [ vector_2 . ]
    (70) vector_2 -> vector_2 . , expression

    ]               shift and go to state 132
    ,               shift and go to state 120


state 129

    (20) for -> FOR ID = expression : expression . instruction
    (51) binary_expr -> expression . + expression
    (52) binary_expr -> expression . - expression
    (53) binary_expr -> expression . * expression
    (54) binary_expr -> expression . / expression
    (55) binary_expr -> expression . DOTADD expression
    (56) binary_expr -> expression . DOTSUB expression
    (57) binary_expr -> expression . DOTMUL expression
    (58) binary_expr -> expression . DOTDIV expression
    (59) binary_expr -> expression . < expression
    (60) binary_expr -> expression . > expression
    (61) binary_expr -> expression . ELESS expression
    (62) binary_expr -> expression . EGREATER expression
    (63) binary_expr -> expression . EQUALS expression
    (64) binary_expr -> expression . NEQUALS expression
    (66) transposition -> expression . '
    (6) instruction -> . { instructions }
    (7) instruction -> . if
    (8) instruction -> . loop
    (9) instruction -> . return ;
    (10) instruction -> . assignment ;
    (11) instruction -> . print ;
    (12) instruction -> . break ;
    (13) instruction -> . continue ;
    (16) if -> . IF ( expression ) instruction
    (17) if -> . IF ( expression ) instruction ELSE instruction
    (18) loop -> . for
    (19) loop -> . while
    (22) return -> . RETURN
    (23) return -> . RETURN expression
    (24) assignment -> . assignable assign_operator expression
    (33) print -> . PRINT printable_list
    (14) break -> . BREAK
    (15) continue -> . CONTINUE
    (20) for -> . FOR ID = expression : expression instruction
    (21) while -> . WHILE ( expression ) instruction
    (30) assignable -> . id
    (31) assignable -> . id [ expression , expression ]
    (32) id -> . ID

    +               shift and go to state 68
    -               shift and go to state 69
    *               shift and go to state 70
    /               shift and go to state 71
    DOTADD          shift and go to state 72
    DOTSUB          shift and go to state 73
    DOTMUL          shift and go to state 74
    DOTDIV          shift and go to state 75
    <               shift and go to state 76
    >               shift and go to state 77
    ELESS           shift and go to state 78
    EGREATER        shift and go to state 79
    EQUALS          shift and go to state 80
    NEQUALS         shift and go to state 81
    '               shift and go to state 82
    {               shift and go to state 5
    IF              shift and go to state 13
    RETURN          shift and go to state 16
    PRINT           shift and go to state 18
    BREAK           shift and go to state 19
    CONTINUE        shift and go to state 20
    FOR             shift and go to state 21
    WHILE           shift and go to state 23
    ID              shift and go to state 22

    instruction                    shift and go to state 133
    if                             shift and go to state 6
    loop                           shift and go to state 7
    return                         shift and go to state 8
    assignment                     shift and go to state 9
    print                          shift and go to state 10
    break                          shift and go to state 11
    continue                       shift and go to state 12
    for                            shift and go to state 14
    while                          shift and go to state 15
    assignable                     shift and go to state 17
    id                             shift and go to state 24

state 130

    (31) assignable -> id [ expression , expression ] .

    =               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    ADDASSIGN       reduce using rule 31 (assignable -> id [ expression , expression ] .)
    SUBASSIGN       reduce using rule 31 (assignable -> id [ expression , expression ] .)
    MULASSIGN       reduce using rule 31 (assignable -> id [ expression , expression ] .)
    DIVASSIGN       reduce using rule 31 (assignable -> id [ expression , expression ] .)
    +               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    -               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    *               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    /               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    DOTADD          reduce using rule 31 (assignable -> id [ expression , expression ] .)
    DOTSUB          reduce using rule 31 (assignable -> id [ expression , expression ] .)
    DOTMUL          reduce using rule 31 (assignable -> id [ expression , expression ] .)
    DOTDIV          reduce using rule 31 (assignable -> id [ expression , expression ] .)
    <               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    >               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    ELESS           reduce using rule 31 (assignable -> id [ expression , expression ] .)
    EGREATER        reduce using rule 31 (assignable -> id [ expression , expression ] .)
    EQUALS          reduce using rule 31 (assignable -> id [ expression , expression ] .)
    NEQUALS         reduce using rule 31 (assignable -> id [ expression , expression ] .)
    '               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    ;               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    ,               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    )               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    ]               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    :               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    {               reduce using rule 31 (assignable -> id [ expression , expression ] .)
    IF              reduce using rule 31 (assignable -> id [ expression , expression ] .)
    RETURN          reduce using rule 31 (assignable -> id [ expression , expression ] .)
    PRINT           reduce using rule 31 (assignable -> id [ expression , expression ] .)
    BREAK           reduce using rule 31 (assignable -> id [ expression , expression ] .)
    CONTINUE        reduce using rule 31 (assignable -> id [ expression , expression ] .)
    FOR             reduce using rule 31 (assignable -> id [ expression , expression ] .)
    WHILE           reduce using rule 31 (assignable -> id [ expression , expression ] .)
    ID              reduce using rule 31 (assignable -> id [ expression , expression ] .)


state 131

    (17) if -> IF ( expression ) instruction ELSE instruction .

    {               reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    IF              reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    RETURN          reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    PRINT           reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    BREAK           reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    FOR             reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    WHILE           reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    ID              reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    $end            reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    }               reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)
    ELSE            reduce using rule 17 (if -> IF ( expression ) instruction ELSE instruction .)


state 132

    (68) vector_1 -> vector_1 , [ vector_2 ] .

    ]               reduce using rule 68 (vector_1 -> vector_1 , [ vector_2 ] .)
    ,               reduce using rule 68 (vector_1 -> vector_1 , [ vector_2 ] .)


state 133

    (20) for -> FOR ID = expression : expression instruction .

    {               reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    IF              reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    RETURN          reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    PRINT           reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    BREAK           reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    CONTINUE        reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    FOR             reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    WHILE           reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    ID              reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    $end            reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    }               reduce using rule 20 (for -> FOR ID = expression : expression instruction .)
    ELSE            reduce using rule 20 (for -> FOR ID = expression : expression instruction .)

